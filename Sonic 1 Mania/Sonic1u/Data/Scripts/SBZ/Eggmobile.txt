// ----------------------------------
// RSDK Project: Sonic 1
// Script Description: Eggmobile Object
// Script Author: Christian Whitehead/Simon Thomley
// Unpacked by Rubberduckycooly's script unpacker
// ----------------------------------

// ========================
// Aliases
// ========================

private alias object.value0 : object.legAnim
private alias object.value1 : object.legAnimTimer
private alias object.value2 : object.flameAnim
private alias object.value3 : object.flameAnimTimer
private alias object.value4 : object.timer
private alias object.value5 : object.explosionTimer
private alias object.value6 : object.playerStopPos
private alias object.value7 : object.fadeTimer
private alias object.value8 : object.eggmanFrame
private alias object.value9 : object.mobileAnimTimer
private alias object.value10 : object.flameFrame
private alias object.value11 : object.equipmentFrame
private alias object.value12 : object.equipmentAnimTimer

private alias 0 : EGGMOBILE_WAITING
private alias 1 : EGGMOBILE_ACTIVATE
private alias 2 : EGGMOBILE_RISE
private alias 3 : EGGMOBILE_FLEE
private alias 4 : EGGMOBILE_HIT
private alias 5 : EGGMOBILE_SEAT
private alias 5 : EGGMOBILE_BOSSRUSH

private alias 0 : EGGMOBILE_ANI_IDLE
private alias 1 : EGGMOBILE_ANI_SEAT
private alias 2 : EGGMOBILE_ANI_FLYING
private alias 3 : EGGMOBILE_ANI_WASHIT

private alias 0 : LEGS_IDLE
private alias 1 : LEGS_RETRACT
private alias 2 : LEGS_NONE

private alias 0 : FLAME_INACTIVE
private alias 1 : FLAME_ACTIVE

// Player Aliases
private alias object.state : player.state
private alias object.xpos : player.xpos
private alias object.xvel : player.xvel
private alias object.yvel : player.yvel
private alias object.speed : player.speed
private alias object.direction : player.direction
private alias object.gravity : player.gravity
private alias object.animation : player.animation
private alias object.animationTimer : player.animationTimer
private alias object.frame : player.frame
private alias object.controlMode : player.controlMode
private alias object.controlLock : player.controlLock
private alias object.right		:	player.right
private alias object.left		:	player.left
private alias object.jumpPress	:	player.jumpPress

// Game Modes
private alias 0 : MODE_NOSAVE
private alias 1 : MODE_NORMAL
private alias 2 : MODE_TIMEATTACK

// Tracks
private alias 1 : TRACK_ACTFINISH

// Reserved Object Slot Aliases
private alias 30 : SLOT_ACTFINISH


// ========================
// Events
// ========================

event ObjectUpdate

	if object.alpha == 2
		switch object.state
		case 0
			object.timer++
			if object.timer > 120
				object.rotation+= 8
				if object.rotation == 256
					object.state++
					object.timer = 0
				end if
			end if
			break
			
		case 1
			object.timer++
			if object.timer > 30
				object.xvel = -18000
				object.yvel = -18000
				object.rotation+= 4
				object.scale -= 2
				if object.scale == 0
					object.state++
				end if
			end if
			break
		
		end switch
		
		object.xpos += object.xvel
		object.ypos += object.yvel
	else
	
		switch object.state
		case EGGMOBILE_WAITING
			foreach (GROUP_PLAYERS, currentPlayer, ACTIVE_ENTITIES)
				BoxCollisionTest(C_SOLID, object.entityPos, -24, -96, 24, 96, currentPlayer, C_BOX, C_BOX, C_BOX, C_BOX)
			next
			break

		case EGGMOBILE_ACTIVATE
			object.priority = PRIORITY_ACTIVE
			object.animation = EGGMOBILE_ANI_FLYING
			object.legAnim = LEGS_RETRACT
			object.yvel = -0x18000
			object.state++
			break

		case EGGMOBILE_RISE
			object.ypos += object.yvel
			object.timer++
			if object.timer >= 52
				object.flameAnim = FLAME_ACTIVE
				object.xvel = 0x18000
				object.yvel = -0x1800
				object.state++
			end if
			break

		case EGGMOBILE_HIT
			foreach (GROUP_PLAYERS, currentPlayer, ACTIVE_ENTITIES)
				player[currentPlayer].controlMode = CONTROLMODE_NONE
			next
			
			if object.timer < 40
				object.explosionTimer++
				temp0 = object.explosionTimer
				temp0 &= 7
				if temp0 == 4
					Rand(temp0, 96)
					temp0 -= 48
					temp0 <<= 16
					temp0 += object.xpos
					Rand(temp1, 48)
					temp1 -= 24
					temp1 <<= 16
					temp1 += object.ypos
					CreateTempObject(TypeName[Explosion], 0, temp0, temp1)
					object[tempObjectPos].drawOrder = 4
					if object.fadeTimer < 256
						PlaySfx(SfxName[Explosion], false)
					end if
				end if

				if object.fadeTimer < 256
					object.timer++
					if object.timer >= 30
						PlaySfx(SfxName[Boss Hit], false)
						object.yvel = 0x6000
						object.timer = 0
					end if
				end if
			end if
			// [Fall-through]
		case EGGMOBILE_FLEE
			object.xpos += object.xvel
			object.ypos += object.yvel
			temp0 = stage.newXBoundary2
			temp0 += 212
			temp0 <<= 16
			if object.xpos >= temp0
	#platform: USE_ORIGINS
				CheckNotEqual(options.gameMode, MODE_TIMEATTACK)
				temp0 = checkResult
				CheckEqual(game.playMode, BOOT_PLAYMODE_BOSSRUSH)
				temp0 &= checkResult
				if temp0 != 0
					CallNativeFunction2(NotifyCallback, NOTIFY_KILL_BOSS, 0)
					CallNativeFunction2(NotifyCallback, NOTIFY_BOSS_END, true)
					StopMusic()
					object.state = EGGMOBILE_BOSSRUSH
					object.fadeTimer = 0
				else
	#endplatform
	#platform: USE_STANDALONE
					if options.gameMode == MODE_TIMEATTACK
	#endplatform
	#platform: USE_ORIGINS
					CheckEqual(options.gameMode, MODE_TIMEATTACK)
					temp0 = checkResult
					CheckNotEqual(game.oneStageFlag, false)
					temp0 |= checkResult
					if temp0 != false
	#endplatform
						object.type = TypeName[Blank Object]
						ResetObjectEntity(SLOT_ACTFINISH, TypeName[Act Finish], 0, 0, 0)
						object[SLOT_ACTFINISH].drawOrder = 6
						object[SLOT_ACTFINISH].priority = PRIORITY_ACTIVE
						stage.timeEnabled = false
						PlayMusic(TRACK_ACTFINISH)
					else
						if object.timer < 40
							object.timer = 40
						end if
						object.timer++
						temp0 = object.timer
						temp0 %= 2
						if temp0 == 0
							music.volume -= 1
						end if
						if object.timer > 200
							object.fadeTimer += 2
							SetScreenFade(0, 0, 0, object.fadeTimer)
							if object.fadeTimer == 384
							
		#platform: USE_ORIGINS
								// This variable isn't used anywhere in Final Zone, perhaps a scrapped achievement?
								temp0 = StageStatsUsabilityParam5
								temp0 &= 1
								temp1 = StageStatsUsabilityParam5
								temp1 &= 2
								temp2 = StageStatsUsabilityParam5
								temp2 &= 4
								
								CallNativeFunction4(NotifyCallback, NOTIFY_STATS_CHARA_ACTION, temp0, temp1, temp2)
								CallNativeFunction2(NotifyCallback, NOTIFY_ACT_FINISH, 0)
								
								StageStatsUsabilityParam1 = 0
								StageStatsUsabilityParam2 = 0
								StageStatsUsabilityParam3 = 0
								StageStatsUsabilityParam4 = 0
								StageStatsUsabilityParam5 = 0
								StatsUsabilityParam1 = 0
								StatsUsabilityParam2 = 0
								StatsUsabilityParam3 = 0
								StatsUsabilityParam4 = 0
								StatsUsabilityParam5 = 0
		#endplatform

								if stage.debugMode == false
									if options.stageSelectFlag == false
										CallNativeFunction2(SetLeaderboard, 19, player.score)
									end if
								end if

								if options.gameMode == MODE_NORMAL
									arrayPos1 = options.saveSlot
									arrayPos1 <<= 3
									arrayPos1 += 4
									saveRAM[arrayPos1] = 20
									WriteSaveRAM()
								end if

								stage.activeList = PRESENTATION_STAGE
								stage.listPos = 1
								LoadStage()
							end if
						end if
					end if
	#platform: USE_ORIGINS
				end if
	#endplatform
			end if

			foreach (GROUP_PLAYERS, currentPlayer, ACTIVE_ENTITIES)
				if player[currentPlayer].xpos >= object.playerStopPos
					CheckEqual(player[currentPlayer].state, Player_State_Ground)
					temp0 = checkResult
	#platform: USE_ORIGINS
					CheckEqual(player[currentPlayer].state, Player_State_Air_NoDropDash)
					temp0 |= checkResult
	#endplatform
					CheckEqual(player[currentPlayer].state, Player_State_Air)
					temp0 |= checkResult
					CheckEqual(player[currentPlayer].state, Player_State_Fly)
					temp0 |= checkResult
					CheckEqual(player[currentPlayer].state, Player_State_GlideRight)
					temp0 |= checkResult
					CheckEqual(player[currentPlayer].state, Player_State_Roll)
					temp0 |= checkResult
					CheckEqual(player[currentPlayer].state, Player_State_RollJump)
					temp0 |= checkResult
					CheckEqual(player[currentPlayer].state, Player_State_Static)
					temp0 |= checkResult
					CheckEqual(player[currentPlayer].state, Player_State_Spindash)
					temp0 |= checkResult

					if temp0 == true
						player[currentPlayer].state = Player_State_Static
						player[currentPlayer].direction = FACING_RIGHT
						player[currentPlayer].controlMode = CONTROLMODE_NONE
						if player[currentPlayer].gravity == 0
							player[currentPlayer].xvel = 0
							player[currentPlayer].speed = 0
							if object.state == EGGMOBILE_FLEE
								if object.timer > 120
									player[currentPlayer].animation = ANI_WAITING
								else
									player[currentPlayer].animation = ANI_LOOKINGUP
									if object.timer < 100
										if player[currentPlayer].frame == 5
											player[currentPlayer].animationTimer = 0
										end if
									end if
								end if
							else
								if object.timer > 40
									if object[currentPlayer].propertyValue == PLAYER_SONIC_A
										player[currentPlayer].animation = ANI_VICTORY
									end if
									if object[currentPlayer].propertyValue == PLAYER_KNUCKLES_A
										player[currentPlayer].animation = ANI_VICTORY
									end if
								else
									player[currentPlayer].animation = ANI_STOPPED
								end if
							end if
						else
							player[currentPlayer].speed = player[currentPlayer].xvel
							player[currentPlayer].yvel += 0x3800
						end if
					else
						if player[currentPlayer].state == Player_State_GlideSlide
							player[currentPlayer].speed = 0
						end if
					end if
				else
					if object.state == EGGMOBILE_FLEE
						temp0 = object.playerStopPos
						temp0 >>= 16
						if object.xpos > object.playerStopPos
							player[currentPlayer].controlMode = CONTROLMODE_NONE
							player[currentPlayer].state = Player_State_Ground
							player[currentPlayer].right = true
							player[currentPlayer].left = false
							if player[currentPlayer].animation == ANI_PUSHING
								player[currentPlayer].jumpPress = true
							else
								player[currentPlayer].jumpPress = false
							end if
						end if
					else
						if player[currentPlayer].xpos < object.xpos
							player[currentPlayer].state = Player_State_Ground
							player[currentPlayer].right = true
							player[currentPlayer].left = false
							if player[currentPlayer].animation == ANI_PUSHING
								player[currentPlayer].jumpPress = true
							else
								player[currentPlayer].jumpPress = false
							end if
						end if
					end if
				end if
			next
			break

		case EGGMOBILE_SEAT
			// position == eggmobile.position
			object.xpos = object[+10].xpos
			object.ypos = object[+10].ypos
			if object[+1].type == TypeName[Blank Object]
				object.type = TypeName[Blank Object]
			end if
			break
			
		end switch

		if object.state == EGGMOBILE_FLEE
			foreach (GROUP_PLAYERS, currentPlayer, ACTIVE_ENTITIES)
				BoxCollisionTest(C_TOUCH, object.entityPos, -20, -16, 20, 16, currentPlayer, C_BOX, C_BOX, C_BOX, C_BOX)
				if checkResult == true
					CallFunction(Player_CheckHit)
					if checkResult == true
						object.state 	 = EGGMOBILE_HIT
						object.animation = EGGMOBILE_ANI_WASHIT
						PlaySfx(SfxName[Boss Hit], false)
						object.timer = 0
						if stage.debugMode == false
							if currentPlayer == 0
								CallNativeFunction2(SetAchievement, 10, 100)
							end if
						end if
					end if
				end if
			next
		end if
	end if
end event


event ObjectDraw

	if object.alpha == 2
		DrawSpriteFX(0, FX_ROTOZOOM, object.xpos, object.ypos)
		DrawSpriteFX(140, FX_ROTOZOOM, object.xpos, object.ypos)
	else
	
	switch object.animation
	case EGGMOBILE_ANI_IDLE
		DrawSpriteFX(0, FX_FLIP, object.xpos, object.ypos)
		break

	case EGGMOBILE_ANI_SEAT
		DrawSpriteFX(2, FX_FLIP, object.xpos, object.ypos)
		break

	case EGGMOBILE_ANI_FLYING
		object.animationTimer++
		object.eggmanFrame++
		if object.eggmanFrame < 176
			object.eggmanFrame = 176
		end if
		if object.eggmanFrame > 193
			object.eggmanFrame = 176
		end if
		DrawSpriteFX(2, FX_FLIP, object.xpos, object.ypos)
		DrawSpriteFX(object.eggmanFrame, FX_FLIP, object.xpos, object.ypos)
		DrawSpriteFX(0, FX_FLIP, object.xpos, object.ypos)
		break

	case EGGMOBILE_ANI_WASHIT
		object.animationTimer++
		object.eggmanFrame++
		if object.eggmanFrame < 140
			object.eggmanFrame = 140
		end if
		if object.eggmanFrame > 175
			object.eggmanFrame = 140
		end if
		DrawSpriteFX(222, FX_FLIP, object.xpos, object.ypos)
		DrawSpriteFX(object.eggmanFrame, FX_FLIP, object.xpos, object.ypos)
		DrawSpriteFX(221, FX_FLIP, object.xpos, object.ypos)
		break
		
	end switch

	switch object.legAnim
	case LEGS_IDLE
		DrawSpriteFX(212, FX_FLIP, object.xpos, object.ypos)
		break
		
	case LEGS_RETRACT
		object.legAnimTimer+= 3
		if object.legAnimTimer >= 60
			object.legAnim = LEGS_NONE
		else
			temp0 = object.legAnimTimer
			temp0 /= 7
			temp0 += 212
			DrawSpriteFX(temp0, FX_FLIP, object.xpos, object.ypos)
		end if
		break
		
	case LEGS_NONE
		break

	end switch

	if object.flameAnim != FLAME_INACTIVE
		object.flameAnimTimer++
		if object.flameAnimTimer > 1
			object.flameFrame++
			object.flameAnimTimer = 0
		end if
		if object.flameFrame < 199
			object.flameFrame = 199
		end if
		if object.flameFrame > 211
			object.flameFrame = 207
		end if
		DrawSpriteFX(object.flameFrame, FX_FLIP, object.xpos, object.ypos)
	end if
	end if
	
end event


event ObjectStartup
	switch stage.playerListPos
	case PLAYER_SONIC_A
		LoadSpriteSheet("Global/Eggman.gif")
		break

	case PLAYER_TAILS_A
		LoadSpriteSheet("Global/Eggman.gif")
		break

	case PLAYER_KNUCKLES_A
		LoadSpriteSheet("Global/EggRobo.gif")
		break

	case PLAYER_AMY_A
		LoadSpriteSheet("Global/Eggman.gif")
		break
	end switch
	// Empty Egg Mobile
	SpriteFrame(-28, -32, 64, 56, 115, 0) // Frame 0
	SpriteFrame(-28, -32, 64, 56, 180, 0) // Frame 1

	// Egg Mobile Seat
	SpriteFrame(-1, -21, 36, 13, 65, 214) // Frame 2

	// Eggman Idle
	SpriteFrame(-16, -32, 36, 24, 0, 0) // Frame 3
	SpriteFrame(-16, -32, 36, 24, 0, 0) // Frame 4
	SpriteFrame(-16, -32, 36, 24, 0, 0) // Frame 5
	SpriteFrame(-16, -32, 36, 24, 0, 25) // Frame 6
	SpriteFrame(-16, -32, 36, 24, 0, 25) // Frame 7
	SpriteFrame(-16, -32, 36, 24, 0, 25) // Frame 8
	SpriteFrame(-16, -32, 36, 24, 0, 50) // Frame 9
	SpriteFrame(-16, -32, 36, 24, 0, 50) // Frame 10
	SpriteFrame(-16, -32, 36, 24, 0, 50) // Frame 11

	//Eggman Laugh
	SpriteFrame(-16, -32, 36, 24, 0, 0) // Frame 12
	SpriteFrame(-16, -32, 36, 24, 0, 0) // Frame 13

	SpriteFrame(-16, -32, 36, 24, 0, 75) // Frame 14
	SpriteFrame(-16, -32, 36, 24, 0, 75) // Frame 15
	SpriteFrame(-16, -32, 36, 24, 0, 75) // Frame 16
	SpriteFrame(-16, -32, 36, 24, 0, 75) // Frame 17

	SpriteFrame(-16, -32, 36, 24, 0, 100) // Frame 18
	SpriteFrame(-16, -32, 36, 24, 0, 100) // Frame 19
	SpriteFrame(-16, -32, 36, 24, 0, 100) // Frame 20
	SpriteFrame(-16, -32, 36, 24, 0, 100) // Frame 21

	SpriteFrame(-16, -32, 36, 24, 0, 150) // Frame 22
	SpriteFrame(-16, -32, 36, 24, 0, 150) // Frame 23
	SpriteFrame(-16, -32, 36, 24, 0, 150) // Frame 24
	SpriteFrame(-16, -32, 36, 24, 0, 150) // Frame 25

	SpriteFrame(-16, -32, 36, 24, 0, 125) // Frame 26
	SpriteFrame(-16, -32, 36, 24, 0, 125) // Frame 27
	SpriteFrame(-16, -32, 36, 24, 0, 125) // Frame 28
	SpriteFrame(-16, -32, 36, 24, 0, 125) // Frame 29

	SpriteFrame(-16, -32, 36, 24, 0, 150) // Frame 30
	SpriteFrame(-16, -32, 36, 24, 0, 150) // Frame 31
	SpriteFrame(-16, -32, 36, 24, 0, 150) // Frame 32
	SpriteFrame(-16, -32, 36, 24, 0, 150) // Frame 33

	SpriteFrame(-16, -32, 36, 24, 0, 125) // Frame 34
	SpriteFrame(-16, -32, 36, 24, 0, 125) // Frame 35
	SpriteFrame(-16, -32, 36, 24, 0, 125) // Frame 36
	SpriteFrame(-16, -32, 36, 24, 0, 125) // Frame 37

	SpriteFrame(-16, -32, 36, 24, 0, 175) // Frame 38
	SpriteFrame(-16, -32, 36, 24, 0, 175) // Frame 39
	SpriteFrame(-16, -32, 36, 24, 0, 175) // Frame 40
	SpriteFrame(-16, -32, 36, 24, 0, 175) // Frame 41
	SpriteFrame(-16, -32, 36, 24, 0, 175) // Frame 42

	SpriteFrame(-16, -32, 36, 24, 0, 100) // Frame 43
	SpriteFrame(-16, -32, 36, 24, 0, 100) // Frame 44
	SpriteFrame(-16, -32, 36, 24, 0, 100) // Frame 45
	SpriteFrame(-16, -32, 36, 24, 0, 100) // Frame 46
	SpriteFrame(-16, -32, 36, 24, 0, 100) // Frame 47

	SpriteFrame(-16, -32, 36, 24, 0, 175) // Frame 48
	SpriteFrame(-16, -32, 36, 24, 0, 175) // Frame 49
	SpriteFrame(-16, -32, 36, 24, 0, 175) // Frame 50
	SpriteFrame(-16, -32, 36, 24, 0, 175) // Frame 51
	SpriteFrame(-16, -32, 36, 24, 0, 175) // Frame 52

	SpriteFrame(-16, -32, 36, 24, 0, 100) // Frame 53
	SpriteFrame(-16, -32, 36, 24, 0, 100) // Frame 54
	SpriteFrame(-16, -32, 36, 24, 0, 100) // Frame 55
	SpriteFrame(-16, -32, 36, 24, 0, 100) // Frame 56
	SpriteFrame(-16, -32, 36, 24, 0, 100) // Frame 57

	SpriteFrame(-16, -32, 36, 24, 0, 175) // Frame 58
	SpriteFrame(-16, -32, 36, 24, 0, 175) // Frame 59
	SpriteFrame(-16, -32, 36, 24, 0, 175) // Frame 60
	SpriteFrame(-16, -32, 36, 24, 0, 175) // Frame 61
	SpriteFrame(-16, -32, 36, 24, 0, 175) // Frame 62

	SpriteFrame(-16, -32, 36, 24, 0, 100) // Frame 63
	SpriteFrame(-16, -32, 36, 24, 0, 100) // Frame 64
	SpriteFrame(-16, -32, 36, 24, 0, 100) // Frame 65
	SpriteFrame(-16, -32, 36, 24, 0, 100) // Frame 66
	SpriteFrame(-16, -32, 36, 24, 0, 100) // Frame 67

	SpriteFrame(-16, -32, 36, 24, 0, 175) // Frame 68
	SpriteFrame(-16, -32, 36, 24, 0, 175) // Frame 69
	SpriteFrame(-16, -32, 36, 24, 0, 175) // Frame 70
	SpriteFrame(-16, -32, 36, 24, 0, 175) // Frame 71
	SpriteFrame(-16, -32, 36, 24, 0, 175) // Frame 72

	SpriteFrame(-16, -32, 36, 24, 0, 100) // Frame 73
	SpriteFrame(-16, -32, 36, 24, 0, 100) // Frame 74
	SpriteFrame(-16, -32, 36, 24, 0, 100) // Frame 75
	SpriteFrame(-16, -32, 36, 24, 0, 100) // Frame 76
	SpriteFrame(-16, -32, 36, 24, 0, 100) // Frame 77

	SpriteFrame(-16, -32, 36, 24, 0, 175) // Frame 78
	SpriteFrame(-16, -32, 36, 24, 0, 175) // Frame 79
	SpriteFrame(-16, -32, 36, 24, 0, 175) // Frame 80
	SpriteFrame(-16, -32, 36, 24, 0, 175) // Frame 81
	SpriteFrame(-16, -32, 36, 24, 0, 175) // Frame 82

	SpriteFrame(-16, -32, 36, 24, 0, 100) // Frame 83
	SpriteFrame(-16, -32, 36, 24, 0, 100) // Frame 84
	SpriteFrame(-16, -32, 36, 24, 0, 100) // Frame 85
	SpriteFrame(-16, -32, 36, 24, 0, 100) // Frame 86
	SpriteFrame(-16, -32, 36, 24, 0, 100) // Frame 87

	SpriteFrame(-16, -32, 36, 24, 0, 175) // Frame 88
	SpriteFrame(-16, -32, 36, 24, 0, 175) // Frame 89
	SpriteFrame(-16, -32, 36, 24, 0, 175) // Frame 90
	SpriteFrame(-16, -32, 36, 24, 0, 175) // Frame 91
	SpriteFrame(-16, -32, 36, 24, 0, 175) // Frame 92

	SpriteFrame(-16, -32, 36, 24, 0, 100) // Frame 93
	SpriteFrame(-16, -32, 36, 24, 0, 100) // Frame 94
	SpriteFrame(-16, -32, 36, 24, 0, 100) // Frame 95
	SpriteFrame(-16, -32, 36, 24, 0, 100) // Frame 96
	SpriteFrame(-16, -32, 36, 24, 0, 100) // Frame 97

	SpriteFrame(-16, -32, 36, 24, 0, 175) // Frame 98
	SpriteFrame(-16, -32, 36, 24, 0, 175) // Frame 99
	SpriteFrame(-16, -32, 36, 24, 0, 175) // Frame 10
	SpriteFrame(-16, -32, 36, 24, 0, 175) // Frame 101
	SpriteFrame(-16, -32, 36, 24, 0, 175) // Frame 102

	SpriteFrame(-16, -32, 36, 24, 0, 75) // Frame 103
	SpriteFrame(-16, -32, 36, 24, 0, 75) // Frame 104
	SpriteFrame(-16, -32, 36, 24, 0, 75) // Frame 105
	SpriteFrame(-16, -32, 36, 24, 0, 75) // Frame 106

	SpriteFrame(-16, -32, 36, 24, 0, 0) // Frame 107
	SpriteFrame(-16, -32, 36, 24, 0, 0) // Frame 108

	// Eggman Hurt
	SpriteFrame(-20, -32, 40, 24, 37, 0) // Frame 109
	SpriteFrame(-20, -32, 40, 24, 37, 0) // Frame 110

	SpriteFrame(-20, -32, 40, 24, 37, 25) // Frame 111
	SpriteFrame(-20, -32, 40, 24, 37, 25) // Frame 112

	SpriteFrame(-20, -32, 40, 24, 37, 50) // Frame 113
	SpriteFrame(-20, -32, 40, 24, 37, 50) // Frame 114

	SpriteFrame(-20, -32, 40, 24, 37, 25) // Frame 115
	SpriteFrame(-20, -32, 40, 24, 37, 25) // Frame 116

	SpriteFrame(-20, -32, 40, 24, 37, 75) // Frame 117
	SpriteFrame(-20, -32, 40, 24, 37, 75) // Frame 118

	SpriteFrame(-20, -32, 40, 24, 37, 25) // Frame 119
	SpriteFrame(-20, -32, 40, 24, 37, 25) // Frame 120

	SpriteFrame(-20, -32, 40, 24, 37, 100) // Frame 121
	SpriteFrame(-20, -32, 40, 24, 37, 100) // Frame 122

	SpriteFrame(-20, -32, 40, 24, 37, 25) // Frame 123
	SpriteFrame(-20, -32, 40, 24, 37, 25) // Frame 124
	SpriteFrame(-20, -32, 40, 24, 37, 25) // Frame 125

	SpriteFrame(-20, -32, 40, 24, 37, 125) // Frame 126
	SpriteFrame(-20, -32, 40, 24, 37, 125) // Frame 127
	SpriteFrame(-20, -32, 40, 24, 37, 125) // Frame 128

	SpriteFrame(-20, -32, 40, 24, 37, 25) // Frame 129
	SpriteFrame(-20, -32, 40, 24, 37, 25) // Frame 130
	SpriteFrame(-20, -32, 40, 24, 37, 25) // Frame 131

	SpriteFrame(-20, -32, 40, 24, 37, 150) // Frame 132
	SpriteFrame(-20, -32, 40, 24, 37, 150) // Frame 133
	SpriteFrame(-20, -32, 40, 24, 37, 150) // Frame 134
	SpriteFrame(-20, -32, 40, 24, 37, 150) // Frame 135
	SpriteFrame(-20, -32, 40, 24, 37, 150) // Frame 136
	SpriteFrame(-20, -32, 40, 24, 37, 150) // Frame 137

	SpriteFrame(-16, -32, 36, 24, 0, 0) // Frame 138
	SpriteFrame(-16, -32, 36, 24, 0, 0) // Frame 139

	// Eggman Toasted
	SpriteFrame(-16, -32, 36, 24, 41, 175) // Frame 140
	SpriteFrame(-16, -32, 36, 24, 41, 175) // Frame 141
	SpriteFrame(-16, -32, 36, 24, 41, 175) // Frame 142
	SpriteFrame(-16, -32, 36, 24, 41, 175) // Frame 143
	SpriteFrame(-16, -32, 36, 24, 41, 175) // Frame 144
	SpriteFrame(-16, -32, 36, 24, 41, 175) // Frame 145
	SpriteFrame(-16, -32, 36, 24, 78, 175) // Frame 146
	SpriteFrame(-16, -32, 36, 24, 78, 175) // Frame 147
	SpriteFrame(-16, -32, 36, 24, 78, 175) // Frame 148
	SpriteFrame(-16, -32, 36, 24, 78, 175) // Frame 149
	SpriteFrame(-16, -32, 36, 24, 78, 175) // Frame 150
	SpriteFrame(-16, -32, 36, 24, 78, 175) // Frame 151
	SpriteFrame(-16, -32, 36, 24, 78, 0) // Frame 152
	SpriteFrame(-16, -32, 36, 24, 78, 0) // Frame 153
	SpriteFrame(-16, -32, 36, 24, 78, 0) // Frame 154
	SpriteFrame(-16, -32, 36, 24, 78, 0) // Frame 155
	SpriteFrame(-16, -32, 36, 24, 78, 0) // Frame 156
	SpriteFrame(-16, -32, 36, 24, 78, 0) // Frame 157
	SpriteFrame(-16, -32, 36, 24, 78, 25) // Frame 158
	SpriteFrame(-16, -32, 36, 24, 78, 25) // Frame 159
	SpriteFrame(-16, -32, 36, 24, 78, 25) // Frame 160
	SpriteFrame(-16, -32, 36, 24, 78, 25) // Frame 161
	SpriteFrame(-16, -32, 36, 24, 78, 25) // Frame 162
	SpriteFrame(-16, -32, 36, 24, 78, 25) // Frame 163
	SpriteFrame(-16, -32, 36, 24, 78, 50) // Frame 164
	SpriteFrame(-16, -32, 36, 24, 78, 50) // Frame 165
	SpriteFrame(-16, -32, 36, 24, 78, 50) // Frame 166
	SpriteFrame(-16, -32, 36, 24, 78, 50) // Frame 167
	SpriteFrame(-16, -32, 36, 24, 78, 50) // Frame 168
	SpriteFrame(-16, -32, 36, 24, 78, 50) // Frame 169
	SpriteFrame(-16, -32, 36, 24, 78, 75) // Frame 170
	SpriteFrame(-16, -32, 36, 24, 78, 75) // Frame 171
	SpriteFrame(-16, -32, 36, 24, 78, 75) // Frame 172
	SpriteFrame(-16, -32, 36, 24, 78, 75) // Frame 173
	SpriteFrame(-16, -32, 36, 24, 78, 75) // Frame 174
	SpriteFrame(-16, -32, 36, 24, 78, 75) // Frame 175

	// Eggman Sweat
	SpriteFrame(-16, -32, 36, 24, 78, 100) // Frame 176
	SpriteFrame(-16, -32, 36, 24, 78, 100) // Frame 177
	SpriteFrame(-16, -32, 36, 24, 78, 100) // Frame 178
	SpriteFrame(-16, -32, 36, 24, 78, 125) // Frame 179
	SpriteFrame(-16, -32, 36, 24, 78, 125) // Frame 180
	SpriteFrame(-16, -32, 36, 24, 78, 125) // Frame 181
	SpriteFrame(-16, -32, 36, 24, 78, 150) // Frame 182
	SpriteFrame(-16, -32, 36, 24, 78, 150) // Frame 183
	SpriteFrame(-16, -32, 36, 24, 78, 150) // Frame 184
	SpriteFrame(-16, -32, 36, 24, 0, 0) // Frame 185
	SpriteFrame(-16, -32, 36, 24, 0, 0) // Frame 186
	SpriteFrame(-16, -32, 36, 24, 0, 0) // Frame 187
	SpriteFrame(-16, -32, 36, 24, 0, 25) // Frame 188
	SpriteFrame(-16, -32, 36, 24, 0, 25) // Frame 189
	SpriteFrame(-16, -32, 36, 24, 0, 25) // Frame 190
	SpriteFrame(-16, -32, 36, 24, 0, 50) // Frame 191
	SpriteFrame(-16, -32, 36, 24, 0, 50) // Frame 192
	SpriteFrame(-16, -32, 36, 24, 0, 50) // Frame 193

	// Jet
	SpriteFrame(34, 1, 10, 9, 103, 229) // Frame 194
	SpriteFrame(33, 0, 15, 11, 113, 229) // Frame 195
	SpriteFrame(33, 1, 10, 9, 194, 229) // Frame 196
	SpriteFrame(33, 1, 13, 9, 205, 229) // Frame 197
	SpriteFrame(33, 0, 25, 11, 219, 229) // Frame 198

	// Jet Burst
	SpriteFrame(34, -1, 22, 14, 128, 229) // Frame 199
	SpriteFrame(34, -1, 22, 14, 128, 229) // Frame 200
	SpriteFrame(34, -8, 32, 26, 66, 300) // Frame 201
	SpriteFrame(34, -8, 32, 26, 66, 300) // Frame 202
	SpriteFrame(34, -8, 32, 26, 33, 300) // Frame 203
	SpriteFrame(34, -8, 32, 26, 33, 300) // Frame 204
	SpriteFrame(34, -8, 32, 26, 0, 300) // Frame 205
	SpriteFrame(34, -1, 22, 14, 128, 229) // Frame 206
	SpriteFrame(34, 1, 10, 9, 103, 229) // Frame 207
	SpriteFrame(33, 0, 15, 11, 113, 229) // Frame 208
	SpriteFrame(33, 1, 10, 9, 194, 229) // Frame 209
	SpriteFrame(33, 1, 13, 9, 205, 229) // Frame 210
	SpriteFrame(33, 0, 25, 11, 219, 229) // Frame 211

	// Legs
	SpriteFrame(-20, 16, 40, 21, 41, 278) // Frame 212
	SpriteFrame(-20, 16, 40, 21, 0, 256) // Frame 213
	SpriteFrame(-20, 16, 40, 21, 0, 278) // Frame 214
	SpriteFrame(-20, 16, 40, 21, 41, 256) // Frame 215
	SpriteFrame(-20, 8, 48, 19, 123, 256) // Frame 216
	SpriteFrame(-20, 8, 48, 16, 123, 276) // Frame 217
	SpriteFrame(-20, 8, 40, 16, 172, 256) // Frame 218
	SpriteFrame(-20, 8, 40, 16, 172, 290) // Frame 219
	SpriteFrame(-20, 8, 40, 16, 172, 273) // Frame 220

	// Damaged Egg Mobile
	SpriteFrame(-28, -32, 64, 56, 0, 200) // Frame 221

	// Damaged Seat
	SpriteFrame(-1, -21, 36, 13, 65, 228) // Frame 222

	foreach (TypeName[Eggmobile], arrayPos0, ALL_ENTITIES)
		object[arrayPos0].direction = FACING_LEFT
		if object[arrayPos0].propertyValue == 1
			object[arrayPos0].state 	= EGGMOBILE_SEAT
			object[arrayPos0].animation = EGGMOBILE_ANI_SEAT
			object[arrayPos0].legAnim 	= LEGS_NONE
		end if
	next
end event


// ========================
// Editor Events
// ========================

event RSDKEdit
	if editor.returnVariable == true
		switch editor.variableID
		case EDIT_VAR_PROPVAL // property value
			checkResult = object.propertyValue
			break
			
		case 0 // type
			checkResult = object.propertyValue
			break
			
		end switch
	else
		switch editor.variableID
		case EDIT_VAR_PROPVAL // property value
			object.propertyValue = editor.variableValue
			break
			
		case 0 // type
			object.propertyValue = editor.variableValue
			break
			
		end switch
	end if
end event


event RSDKDraw
	object.direction = FACING_LEFT

	if object.propertyValue == 1
		DrawSpriteFX(0, FX_FLIP, object.xpos, object.ypos)
	else
		DrawSpriteFX(16, FX_FLIP, object.xpos, object.ypos)
		DrawSpriteFX(17, FX_FLIP, object.xpos, object.ypos)
	end if
end event


event RSDKLoad
	LoadSpriteSheet("Global/Eggman.gif")
	SpriteFrame(-28, -32, 64, 21, 131, 172)
	SpriteFrame(-28, -32, 64, 56, 131, 58)
	SpriteFrame(-28, -32, 64, 56, 66, 1)
	SpriteFrame(-28, -32, 64, 56, 1, 172)
	SpriteFrame(-28, -32, 64, 56, 66, 172)
	SpriteFrame(-20, 16, 40, 21, 131, 115)
	SpriteFrame(-20, 8, 48, 19, 172, 115)
	SpriteFrame(-20, 8, 40, 16, 172, 135)
	SpriteFrame(34, 1, 10, 9, 196, 2)
	SpriteFrame(33, 0, 15, 11, 196, 12)
	SpriteFrame(34, -1, 22, 14, 213, 1)
	SpriteFrame(34, -8, 32, 26, 213, 16)
	SpriteFrame(34, -1, 22, 14, 213, 1)
	SpriteFrame(34, -8, 32, 26, 213, 16)
	SpriteFrame(34, 1, 10, 9, 196, 2)
	SpriteFrame(33, 0, 15, 11, 196, 12)
	SpriteFrame(-28, -32, 27, 21, 131, 172)
	SpriteFrame(-28, -11, 64, 35, 131, 193)

	AddEditorVariable("type")
	SetActiveVariable("type")
	AddEnumVariable("EggMobile", 0)
	AddEnumVariable("Seat", 1)
end event
