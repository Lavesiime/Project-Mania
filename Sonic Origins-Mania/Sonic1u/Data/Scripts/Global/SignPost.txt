// ----------------------------------
// RSDK Project: Sonic 1
// Script Description: Sign Post Object
// Script Author: Christian Whitehead/Simon Thomley
// Unpacked by Rubberduckycooly's script unpacker
// ----------------------------------

// ========================
// Aliases
// ========================

private alias object.value0 : object.spinCount
private alias object.value1 : object.timer

private alias 0 : SIGNPOST_AWAITPLAYER
private alias 1 : SIGNPOST_SPINNING
private alias 2 : SIGNPOST_HANDLEACTFINISH
private alias 3 : SIGNPOST_EXITSTAGERIGHT
private alias 4 : SIGNPOST_TOSPECIALSTAGE
private alias 5 : SIGNPOST_BLANK // Set by Act Finish in SBZ2 transition
private alias 6 : SIGNPOST_WINK

// Track Aliases
private alias 1 : TRACK_ACTFINISH

// Game Mode Aliases
private alias 0 : MODE_NOSAVE
private alias 1 : MODE_SAVEGAME
private alias 2 : MODE_TIMEATTACK

// Player Aliases
private alias 1 : SUPERSTATE_SUPER
private alias 2 : SUPERSTATE_UNTRANSFORM

private alias object.type 			: player.type
private alias object.xpos 			: player.xpos
private alias object.ypos 			: player.ypos
private alias object.xvel 			: player.xvel
private alias object.yvel 			: player.yvel
private alias object.speed 			: player.speed
private alias object.gravity 		: player.gravity
private alias object.up 			: player.up
private alias object.down 			: player.down
private alias object.left 			: player.left
private alias object.right 			: player.right
private alias object.jumpPress 		: player.jumpPress
private alias object.jumpHold 		: player.jumpHold
private alias object.interaction 	: player.interaction
private alias object.controlMode 	: player.controlMode
private alias object.value7 		: player.invincibleTimer
private alias object.animation		: player.animation

// Reserved Object Slot Aliases
private alias 30 : SLOT_ACTFINISH

// Achievement Aliases
private alias 1 : ACHIEVEMENT_BLASTPROCESSING

// Face Aliases
private alias 0 : FACE_TEXTURED_3D
private alias 1 : FACE_TEXTURED_2D
private alias 2 : FACE_COLOURED_3D
private alias 3 : FACE_COLOURED_2D
private alias 4 : FACE_FADED
private alias 5 : FACE_TEXTURED_C
private alias 6 : FACE_TEXTURED_D
private alias 7 : FACE_SPRITE3D

private alias object.value11: object.XCenter
private alias object.value12: object.YCenter
private alias object.value13: object.ZCenter

private alias object.value14: object.rectAlpha
private alias object.value15: object.debugToggle
private alias object.value16: object.cartAlpha
private alias object.value17: object.ZLock

private alias object.value18: object.logoXPos
private alias object.value19: object.boxTopTex
private alias object.value20: object.boxBotTex

private alias object.value21: object.XVectorPoint
private alias object.value22: object.YVectorPoint
private alias object.value23: object.ZVectorPoint

private alias object.value24: object.pointerX
private alias object.value25: object.pointerY
private alias object.value26: object.pointerZ
private alias object.value27: object.pointerXInc
private alias object.value28: object.pointerYInc
private alias object.value30: object.pointerZInc
private alias object.value31: object.invertRot
private alias object.value32: object.zpos

private alias object.value33 : object.pointX
private alias object.value34 : object.pointY
private alias object.value35 : object.pointZ

private alias object.value36 : object.xpos3D

// Function declarations
reserve function MainCover_GetBoxCenter

reserve function MainCover_DrawTopBotFaces
reserve function MainCover_DrawBackFace
reserve function MainCover_DrawFrontFace
reserve function MainCover_DrawLeftFace
reserve function MainCover_DrawRightFace

// Static Values

// Tables
private table MainCover_VectorPoint
	0, 0, -80
	10, 0, -80
	10, 58, -80
	0, 58, -80

	0, 0, 80
	10, 0, 80
	10, 58, 80
	0, 58, 80
end table


private table MainCover_VectorX[8]
private table MainCover_VectorY[8]
private table MainCover_VectorZ[8]

// ========================
// Function Declarations
// ========================

reserve function SignPost_DebugDraw
reserve function SignPost_DebugSpawn


// ========================
// Function Declarations
// ========================

private function SignPost_DebugDraw
	DrawSprite(0)
	DrawSprite(1)
end function


private function SignPost_DebugSpawn
	CreateTempObject(TypeName[Sign Post], 0, object.xpos, object.ypos)
	object[tempObjectPos].frame = 1
	object[tempObjectPos].spinCount = 16
end function

private function MainCover_GetBoxCenter
	// Get the center of the object
	object.XCenter = 0
	object.YCenter = 0
	object.ZCenter = 0
	
	ArrayPos0 = 0
	while ArrayPos0 < 8
		temp0  = arrayPos0
		temp0 *= 3
		GetTableValue(object.XVectorPoint, temp0, MainCover_VectorPoint)
		temp0++
		GetTableValue(object.YVectorPoint, temp0, MainCover_VectorPoint)
		temp0++
		GetTableValue(object.ZVectorPoint, temp0, MainCover_VectorPoint)
		object.XCenter += object.XVectorPoint
		object.YCenter += object.YVectorPoint
		object.ZCenter += object.ZVectorPoint
		ArrayPos0++
	loop
	object.XCenter /= 8
	object.YCenter /= 8
	object.ZCenter /= 8
end function

private function MainCover_GetRotation
	arrayPos0 = 0
	while arrayPos0 < 8
		temp0  = arrayPos0
		temp0 *= 3
		GetTableValue(object.XVectorPoint, temp0, MainCover_VectorPoint)
		temp0++
		GetTableValue(object.YVectorPoint, temp0, MainCover_VectorPoint)
		temp0++
		GetTableValue(object.ZVectorPoint, temp0, MainCover_VectorPoint)
		object.pointX = object.XVectorPoint
		object.pointY = object.YVectorPoint
		object.pointZ = object.ZVectorPoint

		// Rotate X
		// X
		temp0   = object.pointX
		temp0  -= object.XCenter
		cos(object.angle, object.pointerZ)
		temp0  *= object.angle

		temp1   = object.pointY
		temp1  -= object.YCenter
		sin(object.angle, object.pointerZ)
		temp1  *= object.angle
		object.XVectorPoint  = temp0
		object.XVectorPoint -= temp1

		// Y
		temp0   = object.pointX
		temp0  -= object.XCenter
		Sin(object.angle, object.pointerZ)
		temp0  *= object.angle

		temp1   = object.pointY
		temp1  -= object.YCenter
		Cos(object.angle, object.pointerZ)
		temp1  *= object.angle
		object.YVectorPoint  = temp0
		object.YVectorPoint += temp1


		object.XVectorPoint += object.XCenter
		object.YVectorPoint += object.YCenter
		//object.ZVectorPoint += object.ZCenter
		object.XVectorPoint >>= 8
		object.YVectorPoint >>= 8
		//object.ZVectorPoint >>= 8
		SetTableValue(object.XVectorPoint, arrayPos0, MainCover_VectorX)
		SetTableValue(object.YVectorPoint, arrayPos0, MainCover_VectorY)
		//SetTableValue(object.ZVectorPoint, arrayPos0, MainCover_VectorZ)
		
		ArrayPos0++
	loop
end function

private function MainCover_DrawTopBotFaces
	arrayPos0 = 0
	while arrayPos0 < 8
		temp0  = arrayPos0
		temp0 *= 3
		GetTableValue(object.XVectorPoint, temp0, MainCover_VectorPoint)
		temp0++
		GetTableValue(object.YVectorPoint, temp0, MainCover_VectorPoint)
		temp0++
		GetTableValue(object.ZVectorPoint, temp0, MainCover_VectorPoint)
		VertexBuffer[arrayPos0].x = object.XCenter
		VertexBuffer[arrayPos0].y = object.YCenter
		VertexBuffer[arrayPos0].z = object.ZVectorPoint
		GetTableValue(object.XVectorPoint, arrayPos0, MainCover_VectorX)
		GetTableValue(object.YVectorPoint, arrayPos0, MainCover_VectorY)
		//GetTableValue(object.ZVectorPoint, arrayPos0, MainCover_VectorZ)
		VertexBuffer[arrayPos0].x += object.XVectorPoint
		VertexBuffer[arrayPos0].y += object.YVectorPoint
		//VertexBuffer[arrayPos0].z += object.ZVectorPoint
		
		arrayPos0++
	loop
end function

private function MainCover_DrawBackFace
		VertexBuffer[8].x = VertexBuffer[0].x
		VertexBuffer[8].y = VertexBuffer[0].y
		VertexBuffer[8].z = VertexBuffer[0].z

		VertexBuffer[9].x = VertexBuffer[4].x
		VertexBuffer[9].y = VertexBuffer[4].y
		VertexBuffer[9].z = VertexBuffer[4].z

		VertexBuffer[10].x = VertexBuffer[5].x
		VertexBuffer[10].y = VertexBuffer[5].y
		VertexBuffer[10].z = VertexBuffer[5].z

		VertexBuffer[11].x = VertexBuffer[1].x
		VertexBuffer[11].y = VertexBuffer[1].y
		VertexBuffer[11].z = VertexBuffer[1].z
end function

private function MainCover_DrawFrontFace
		VertexBuffer[12].x = VertexBuffer[3].x
		VertexBuffer[12].y = VertexBuffer[3].y
		VertexBuffer[12].z = VertexBuffer[3].z

		VertexBuffer[13].x = VertexBuffer[2].x
		VertexBuffer[13].y = VertexBuffer[2].y
		VertexBuffer[13].z = VertexBuffer[2].z

		VertexBuffer[14].x = VertexBuffer[6].x
		VertexBuffer[14].y = VertexBuffer[6].y
		VertexBuffer[14].z = VertexBuffer[6].z

		VertexBuffer[15].x = VertexBuffer[7].x
		VertexBuffer[15].y = VertexBuffer[7].y
		VertexBuffer[15].z = VertexBuffer[7].z
end function

private function MainCover_DrawLeftFace
		VertexBuffer[16].x = VertexBuffer[1].x
		VertexBuffer[16].y = VertexBuffer[1].y
		VertexBuffer[16].z = VertexBuffer[1].z

		VertexBuffer[17].x = VertexBuffer[5].x
		VertexBuffer[17].y = VertexBuffer[5].y
		VertexBuffer[17].z = VertexBuffer[5].z

		VertexBuffer[18].x = VertexBuffer[6].x
		VertexBuffer[18].y = VertexBuffer[6].y
		VertexBuffer[18].z = VertexBuffer[6].z

		VertexBuffer[19].x = VertexBuffer[2].x
		VertexBuffer[19].y = VertexBuffer[2].y
		VertexBuffer[19].z = VertexBuffer[2].z
end function

private function MainCover_DrawRightFace
		VertexBuffer[20].x = VertexBuffer[0].x
		VertexBuffer[20].y = VertexBuffer[0].y
		VertexBuffer[20].z = VertexBuffer[0].z

		VertexBuffer[21].x = VertexBuffer[3].x
		VertexBuffer[21].y = VertexBuffer[3].y
		VertexBuffer[21].z = VertexBuffer[3].z

		VertexBuffer[22].x = VertexBuffer[7].x
		VertexBuffer[22].y = VertexBuffer[7].y
		VertexBuffer[22].z = VertexBuffer[7].z

		VertexBuffer[23].x = VertexBuffer[4].x
		VertexBuffer[23].y = VertexBuffer[4].y
		VertexBuffer[23].z = VertexBuffer[4].z
end function

// ========================
// Events
// ========================

event ObjectUpdate
	switch object.state
	case SIGNPOST_AWAITPLAYER
		temp0 = object.ypos
		temp0 += 0x400000
		if player[0].ypos < temp0
			stage.newXBoundary1 = object.xpos
			stage.newXBoundary1 >>= 16
			stage.newXBoundary1 -= screen.xcenter
			stage.newXBoundary1 -= screen.xcenter
			stage.newXBoundary2 = object.xpos
			stage.newXBoundary2 >>= 16
			stage.newXBoundary2 += screen.xcenter
			if player[0].xpos > object.xpos
				stage.newXBoundary1 = object.xpos
				stage.newXBoundary1 >>= 16
				stage.newXBoundary1 -= screen.xcenter
				
				if stage.debugMode == false
					if stage.listPos == 0
						if stage.minutes == 0
							if stage.seconds < 30
								// Grant the "Blast Processing" Achievement
								CallNativeFunction2(SetAchievement, ACHIEVEMENT_BLASTPROCESSING, 100)
							end if
						end if
					end if
				end if

#platform: USE_ORIGINS
				CallNativeFunction2(NotifyCallback, NOTIFY_TOUCH_SIGNPOST, 0)
#endplatform
				stage.timeEnabled = false
				object.state = SIGNPOST_SPINNING
				PlaySfx(SfxName[Sign Post], false)
				if Player_superState == SUPERSTATE_SUPER
					Player_superState = SUPERSTATE_UNTRANSFORM
				end if
			end if
		end if
		break

	case SIGNPOST_SPINNING
		music.volume--
		object.timer++
		if object.timer == 1
			object.timer = 0
			object.frame++
			if object.frame == 10
				object.frame = 1
				Rand(temp0, 48)
				temp0 <<= 16
				temp0 += object.xpos
				temp0 -= 0x180000
				Rand(temp1, 32)
				temp1 <<= 16
				temp1 += object.ypos
				temp1 -= 0x140000
				CreateTempObject(TypeName[Ring Sparkle], 0, temp0, temp1)

				object.spinCount--
				if object.pointerZ == 127 // On front face?
					if object.spinCount <= 0
						if player[0].type == TypeName[Blank Object]
							object.state = SIGNPOST_TOSPECIALSTAGE

							if object.propertyValue < 3
								PlayMusic(TRACK_ACTFINISH)
							else
								if object.outOfBounds == false
									PlayMusic(TRACK_ACTFINISH)
								end if
							end if

							object[SLOT_ACTFINISH].type = TypeName[Act Finish]
							object[SLOT_ACTFINISH].drawOrder = 6
							object[SLOT_ACTFINISH].priority = PRIORITY_ACTIVE
							
							player[0].controlMode = CONTROLMODE_NONE
							player[0].interaction = false
							
							if stage.player2Enabled == true
								player[1].interaction 	= false
								player[1].controlMode 	= CONTROLMODE_NONE
								player[1].up 			= false
								player[1].down 			= false
								player[1].left 			= false
								player[1].jumpPress 	= false
								player[1].jumpHold 		= false
							end if
						else
							player[0].controlMode 	= CONTROLMODE_NONE
							player[0].interaction 	= false
							player[0].up 			= false
							player[0].down 			= false
							player[0].left 			= false
							player[0].jumpPress 	= false
							player[0].jumpHold 		= false
							if stage.player2Enabled == true
								player[1].controlMode 	= CONTROLMODE_NONE
								player[1].interaction 	= false
								player[1].up 			= false
								player[1].down 			= false
								player[1].left 			= false
								player[1].jumpPress 	= false
								player[1].jumpHold 		= false
							end if

							object.state = SIGNPOST_HANDLEACTFINISH
						end if
					end if
				end if
			end if
		end if

		temp0 = 40
		temp0 += screen.xcenter
		temp0 <<= 16
		temp0 += object.xpos
		if player[0].xpos > temp0
			player[0].xpos = temp0
			player[0].speed = 0
			player[0].xvel = 0
		end if

		if stage.player2Enabled == true
			if player[1].xpos > temp0
				player[1].xpos = temp0
				player[1].speed = 0
				player[1].xvel = 0
			end if
		end if
		break

	case SIGNPOST_HANDLEACTFINISH
		if player[0].type == TypeName[Blank Object]
			object.state = SIGNPOST_TOSPECIALSTAGE
			
			if object.propertyValue < 3
				PlayMusic(TRACK_ACTFINISH)
			else
				if object.outOfBounds == false
					PlayMusic(TRACK_ACTFINISH)
				end if
			end if
			object[SLOT_ACTFINISH].type = TypeName[Act Finish]
			object[SLOT_ACTFINISH].drawOrder = 6
			object[SLOT_ACTFINISH].priority = PRIORITY_ACTIVE
		end if

		if player[0].controlMode == CONTROLMODE_NONE
			player[0].right = true
		end if

		if stage.player2Enabled == true
			player[1].controlMode = player[0].controlMode
			if player[1].controlMode == CONTROLMODE_NONE
				if player[1].left == false
					player[1].right = true
				end if
			end if
		end if

		temp0 = screen.xcenter
		temp0 <<= 16
		temp0 += object.xpos
		if player[0].xpos > temp0
			if object.propertyValue < 3
				PlayMusic(TRACK_ACTFINISH)
			else
				if object.outOfBounds == false
					PlayMusic(TRACK_ACTFINISH)
				end if
			end if

			object.state = SIGNPOST_EXITSTAGERIGHT
			object[SLOT_ACTFINISH].type = TypeName[Act Finish]
			object[SLOT_ACTFINISH].drawOrder = 6
			object[SLOT_ACTFINISH].priority = PRIORITY_ACTIVE
#platform: USE_ORIGINS
		else
			if player[0].animation == ANI_PUSHING
				PlayMusic(TRACK_ACTFINISH)
				object.state = SIGNPOST_TOSPECIALSTAGE
				object[SLOT_ACTFINISH].type = TypeName[Act Finish]
				object[SLOT_ACTFINISH].drawOrder = 6
				object[SLOT_ACTFINISH].priority = PRIORITY_ACTIVE
			end if
#endplatform

		end if
		break

	case SIGNPOST_EXITSTAGERIGHT
		if player[0].controlMode == CONTROLMODE_NONE
			player[0].right = true
		end if

		temp0 = 40
		temp0 += screen.xcenter
		temp0 <<= 16
		temp0 += object.xpos
		if player[0].xpos > temp0
			player[0].xpos = temp0
			player[0].speed = 0
			player[0].xvel = 0
		end if

		if stage.player2Enabled == true
			if player[1].controlMode == CONTROLMODE_NONE
				player[1].right = true
			end if

			if player[1].xpos > temp0
				player[1].xpos = temp0
				player[1].speed = 0
				player[1].xvel = 0
			end if
		end if
		break

	case SIGNPOST_TOSPECIALSTAGE
		if stage.player2Enabled == true
			temp0 = 40
			temp0 += screen.xcenter
			temp0 <<= 16
			temp0 += object.xpos
			player[1].right = true
			player[1].controlMode = CONTROLMODE_NONE
			if player[1].xpos > temp0
				player[1].xpos = temp0
				player[1].speed = 0
				player[1].xvel = 0
			end if
		end if
		break
		
	// "SIGNPOST_BLANK" doesn't have anything, it's set by Act Finish in SBZ2 for the transition
	
	case SIGNPOST_WINK
		if player[0].controlMode == CONTROLMODE_NONE
			player[0].right = true
		end if

		temp0 = 40
		temp0 += screen.xcenter
		temp0 <<= 16
		temp0 += object.xpos
		if player[0].xpos > temp0
			player[0].xpos = temp0
			player[0].speed = 0
			player[0].xvel = 0
		end if

		if stage.player2Enabled == true
			if player[1].controlMode == CONTROLMODE_NONE
				player[1].right = true
			end if

			if player[1].xpos > temp0
				player[1].xpos = temp0
				player[1].speed = 0
				player[1].xvel = 0
			end if
		end if

		if object.timer < 15
			object.animationTimer++
			if object.animationTimer > 2
				object.frame++
				object.animationTimer = 0
			end if
			if object.frame < 3
				object.frame = 3
			end if
			if object.frame > 11
				object.frame = 11
			end if
		end if
		if object.timer > 16
			object.frame = 18
		end if
		break
	end switch

#platform: USE_ORIGINS
	if game.playMode == BOOT_PLAYMODE_MISSION
		if object.state > SIGNPOST_AWAITPLAYER
			player[0].invincibleTimer = 80
			
			if object.state > SIGNPOST_SPINNING
				CheckCurrentStageFolder("Mission_Zone02") // Marble Zone - Mission Mode
				temp0 = checkResult
				CheckEqual(stage.actNum, 1) // "Ring Rush"
				checkResult &= temp0
				player[0].interaction = checkResult
			end if
		end if
	end if
#endplatform
end event


event ObjectDraw

	switch object.state
	
	case SIGNPOST_AWAITPLAYER
		DrawSprite(0)
		DrawSprite(1)
		DrawSprite(2)
		break
	case SIGNPOST_SPINNING
		CallFunction(MainCover_GetBoxCenter)

		temp0 = object.spinCount
		temp0 *= 2
		temp0 /= 8
		temp0 *= 8
		if temp0 > 8
			object.pointerZ += temp0
		else
			object.pointerZ += 8
		end if
		//object.pointerZ = 0
		//object.pointerZ = 127
		//object.pointerZ = 255
		//object.pointerZ = 383
		
		//object.pointerX /= 8
		//object.pointerY /= 8
		object.pointerZ &= 0x1FF
		CheckEqual(object.invertRot, true)
		temp0 = checkResult
		CheckLower(object.pointerZ, 129)
		temp0 &= checkResult
		CheckGreater(object.pointerZ, 120)
		temp0 &= checkResult
		if temp0 == true
			object.pointerZ = 128
			object.ZLock = true
		end if

		// Rotate the points
		CallFunction(MainCover_GetRotation)

		CallFunction(MainCover_DrawTopBotFaces)
		CallFunction(MainCover_DrawBackFace)
		CallFunction(MainCover_DrawFrontFace)
		CallFunction(MainCover_DrawLeftFace)
		CallFunction(MainCover_DrawRightFace)

		// I couldn't tell you why this exact arithmetic gets the correct vertical scrolling speed for the signs, but it does.
		temp0 = camera[0].xpos
		temp0 -= object.ixpos
		temp0 *= 640
		temp0 /= 265
		temp0 -= 3
		
		temp2 = object.iypos
		temp2 -= camera[0].ypos
		temp2 -= object[0].lookPosY // camera ypos does not take into account the player looking up / down
		temp2 += screen.ycenter
		temp2 -= 135
		temp2 *= 640
		temp2 /= 120
		
		MatrixTranslateXYZ(MAT_WORLD, temp0, -0xfffff, temp2)
		MatrixRotateXYZ(MAT_VIEW, -128, 0, 256)
		scene3D.vertexCount = 24
		scene3D.faceCount   = 6

		DrawSprite(0)
		DrawSprite(1)
		Draw3DScene()
		break
	
	case SIGNPOST_WINK
		DrawSprite(0)
		DrawSprite(1)
		DrawSprite(object.frame)
		break
		
	default
		DrawSprite(0)
		DrawSprite(1)
		DrawSprite(3)
		break
		
	end switch
end event


event ObjectStartup
	LoadSpriteSheet("Global/Items.gif")

	scene3D.vertexCount = 0
	scene3D.faceCount   = 0
	
	// reset matrix
	MatrixTranslateXYZ(MAT_WORLD, 0, 0, 0)
	MatrixRotateZ(MAT_WORLD, 0)
	ArrayPos0 = 0
	ArrayPos1 = 0

	// Face corner setup
	while ArrayPos0 < 24
		// Top Left
		FaceBuffer[ArrayPos1].a  = ArrayPos0
		// Top Right
		FaceBuffer[ArrayPos1].b  = ArrayPos0
		FaceBuffer[ArrayPos1].b += 2
		// Bottom Left
		FaceBuffer[ArrayPos1].c  = ArrayPos0
		FaceBuffer[ArrayPos1].c += 1
		// Bottom Right
		FaceBuffer[ArrayPos1].d  = ArrayPos0
		FaceBuffer[ArrayPos1].d += 3
	
		ArrayPos1++
		ArrayPos0 += 4
	loop

	// Face rendering
	FaceBuffer[0].Flag  = FACE_COLOURED_3D
	faceBuffer[0].Color = 0x00303030

	FaceBuffer[1].Flag  = FACE_COLOURED_3D
	faceBuffer[1].Color = 0x00303030

	FaceBuffer[2].Flag  = FACE_TEXTURED_3D
	faceBuffer[2].Color = 0xFF303030

	FaceBuffer[3].Flag  = FACE_TEXTURED_3D
	faceBuffer[3].Color = 0xFF303030

	FaceBuffer[4].Flag  = FACE_TEXTURED_3D
	faceBuffer[4].Color = 0xFF303030

	FaceBuffer[5].Flag  = FACE_TEXTURED_3D
	faceBuffer[5].Color = 0xFF303030

	// Back Face
		// Starting co-ords
		temp0 = 246
		temp1 = 366
		
		// Top-left
		VertexBuffer[20].u = temp0
		VertexBuffer[20].v = temp1
		
		// Bottom-left
		temp1 += 30
		VertexBuffer[23].u = temp0
		VertexBuffer[23].v = temp1
		
		// Bottom-right
		temp0 += 48
		VertexBuffer[22].u = temp0
		VertexBuffer[22].v = temp1
		
		// Top-right
		temp1 -= 30
		VertexBuffer[21].u = temp0
		VertexBuffer[21].v = temp1

	// Side 1
		// Starting co-ords
		temp0 = 492
		temp1 = 366
		
		// Top-left
		VertexBuffer[13].u = temp0
		VertexBuffer[13].v = temp1
		
		// Bottom-left
		temp1 += 30
		VertexBuffer[14].u = temp0
		VertexBuffer[14].v = temp1
		
		// Bottom-right
		temp0 += 8
		VertexBuffer[15].u = temp0
		VertexBuffer[15].v = temp1
		
		// Top-right
		temp1 -= 30
		VertexBuffer[12].u = temp0
		VertexBuffer[12].v = temp1
		
	// Side 2
		// Starting co-ords
		temp0 = 492
		temp1 = 366
		
		// Top-left
		VertexBuffer[8].u = temp0
		VertexBuffer[8].v = temp1
		
		// Bottom-left
		temp1 += 30
		VertexBuffer[9].u = temp0
		VertexBuffer[9].v = temp1
		
		// Bottom-right
		temp0 += 8
		VertexBuffer[10].u = temp0
		VertexBuffer[10].v = temp1
		
		// Top-right
		temp1 -= 30
		VertexBuffer[11].u = temp0
		VertexBuffer[11].v = temp1

	// account for all vertices and faces
	scene3D.vertexCount += 24
	scene3D.faceCount   += 6

	scene3D.projectionX  = 435000
	scene3D.projectionY  = 198000
	
	SpriteFrame(-24, 16, 48, 16, 246, 396)
	SpriteFrame(-24, -16, 48, 2, 246, 364)
	SpriteFrame(-24, -14, 48, 30, 246, 366)
	switch stage.playerListPos
	case PLAYER_SONIC_A
		SpriteFrame(-24, -14, 48, 30, 296, 366)

		// Wink Frames
		SpriteFrame(-24, -14, 48, 30, 257, 1)
		SpriteFrame(-24, -14, 48, 30, 306, 1)
		SpriteFrame(-24, -14, 48, 30, 355, 1)
		SpriteFrame(-24, -14, 48, 30, 404, 1)
		SpriteFrame(-24, -14, 48, 30, 355, 1)
		SpriteFrame(-24, -14, 48, 30, 306, 1)
		SpriteFrame(-24, -14, 48, 30, 257, 1)
		
		SpriteFrame(-24, -14, 48, 30, 296, 366)
		temp0 = 296
		temp1 = 366
		break
		
	case PLAYER_TAILS_A
		SpriteFrame(-24, -14, 48, 30, 345, 366)

		// Wink Frames
		SpriteFrame(-24, -14, 48, 30, 453, 1)
		SpriteFrame(-24, -14, 48, 30, 257, 32)
		SpriteFrame(-24, -14, 48, 30, 306, 32)
		SpriteFrame(-24, -14, 48, 30, 355, 32)
		SpriteFrame(-24, -14, 48, 30, 306, 32)
		SpriteFrame(-24, -14, 48, 30, 257, 32)
		SpriteFrame(-24, -14, 48, 30, 453, 1)
		
		SpriteFrame(-24, -14, 48, 30, 345, 366)
		temp0 = 345
		temp1 = 366
		break
		
	case PLAYER_KNUCKLES_A
		SpriteFrame(-24, -14, 48, 30, 394, 366)

		// Wink Frames
		SpriteFrame(-24, -14, 48, 30, 404, 32)
		SpriteFrame(-24, -14, 48, 30, 453, 32)
		SpriteFrame(-24, -14, 48, 30, 355, 63)
		SpriteFrame(-24, -14, 48, 30, 404, 63)
		SpriteFrame(-24, -14, 48, 30, 355, 63)
		SpriteFrame(-24, -14, 48, 30, 453, 32)
		SpriteFrame(-24, -14, 48, 30, 404, 32)
		
		SpriteFrame(-24, -14, 48, 30, 394, 366)
		temp0 = 394
		temp1 = 366
		break
		
#platform: USE_ORIGINS
	case PLAYER_AMY_A
		SpriteFrame(-24, -14, 48, 30, 443, 366)

		// Wink Frames
		SpriteFrame(-24, -14, 48, 30, 453, 63)
		SpriteFrame(-24, -14, 48, 30, 355, 94)
		SpriteFrame(-24, -14, 48, 30, 404, 94)
		SpriteFrame(-24, -14, 48, 30, 453, 94)
		SpriteFrame(-24, -14, 48, 30, 404, 94)
		SpriteFrame(-24, -14, 48, 30, 355, 94)
		SpriteFrame(-24, -14, 48, 30, 453, 63)
		
		SpriteFrame(-24, -14, 48, 30, 443, 366)
		temp0 = 443
		temp1 = 366
		break
#endplatform
	end switch
	
	// Front face of 3D spinning model. temp0 and temp1 are set when creating the spriteframes
		// Top-left
		VertexBuffer[16].u = temp0
		VertexBuffer[16].v = temp1
		
		// Bottom-left
		temp1 += 30
		VertexBuffer[17].u = temp0
		VertexBuffer[17].v = temp1
		
		// Bottom-right
		temp0 += 48
		VertexBuffer[18].u = temp0
		VertexBuffer[18].v = temp1
		
		// Top-right
		temp1 -= 30
		VertexBuffer[19].u = temp0
		VertexBuffer[19].v = temp1
		
	
	foreach (TypeName[Sign Post], arrayPos0, ALL_ENTITIES)
		object[arrayPos0].frame = 1
		object[arrayPos0].spinCount = 16
		object[arrayPos0].priority = PRIORITY_XBOUNDS
		object[arrayPos0].pointerZ += 383
	next
	
	SetTableValue(TypeName[Sign Post], DebugMode_ObjCount, DebugMode_TypesTable)
	SetTableValue(SignPost_DebugDraw, DebugMode_ObjCount, DebugMode_DrawTable)
	SetTableValue(SignPost_DebugSpawn, DebugMode_ObjCount, DebugMode_SpawnTable)
	DebugMode_ObjCount++
end event


// ========================
// Editor Events
// ========================

event RSDKEdit
	if editor.returnVariable == true
		switch editor.variableID
		case EDIT_VAR_PROPVAL // property value
			checkResult = object.propertyValue
			break
			
		case 0 // type
			checkResult = object.propertyValue
			break
			
		end switch
	else
		switch editor.variableID
		case EDIT_VAR_PROPVAL // property value
			object.propertyValue = editor.variableValue
			break
			
		case 0 // type
			object.propertyValue = editor.variableValue
			break
			
		end switch
	end if
end event


event RSDKDraw
	DrawSprite(0)
	DrawSprite(1)
end event


event RSDKLoad
	LoadSpriteSheet("Global/Items2.gif")
	SpriteFrame(-24, 16, 48, 16, 34, 214)
	SpriteFrame(-24, -16, 48, 32, 34, 182)
	
	AddEditorVariable("type")
	SetActiveVariable("type")
	AddEnumVariable("Normal", 0)

	// Skip a few entries, these values are used in CD, where this object's code is originally from, but here they do nothing

	AddEnumVariable("Follow Bounds", 3) // This (and the other skipped values) do far more in CD, but in terms of purely S1, this is technically all
end event
