// ----------------------------------
// RSDK Project: Sonic 1
// Script Description: Logo Object
// Script Author: Christian Whitehead/Simon Thomley
// Unpacked by Rubberduckycooly's script unpacker
// ----------------------------------

// ========================
// Aliases
// ========================

private alias object.value0  : object.timer
private alias object.value1  : object.playerPos.x
private alias object.value2  : object.playerPos.y
private alias object.value3  : object.paletteTimer
private alias object.value4  : object.arrayPos
private alias object.value5  : object.armFrame
private alias object.value6  : object.armPos.x
private alias object.value7  : object.armPos.y
private alias object.value8  : object.charTitlePos
private alias object.value9  : object.speedPercent
private alias object.value10 : object.disablePaletteRotation // Not actually used as far as I can tell
private alias object.value11 : object.player2Pos.x
private alias object.value12 : object.player2Pos.y
private alias object.value13 : object.p2Frame
private alias object.value14 : object.levelSelectCheatPos
private alias object.value15 : object.debugModeCheatPos
private alias object.value16 : object.regionSwitchCheatPos
private alias object.value17 : object.character

// Alias for the character workaround
private alias temp1 : temp.titleCharacter

// States
// The first 3 states are identical so there's really not much reason to have em seperate but it is what it is

// Sonic States
private alias 0  : LOGO_SETUP_SONIC
private alias 1  : LOGO_FADEIN_SONIC
private alias 2  : LOGO_RISEDELAY_SONIC
private alias 3  : LOGO_RISE_SONIC
private alias 4  : LOGO_ANIMATE_SONIC
private alias 5  : LOGO_FINGERWIGGLE_SONIC
private alias 6  : LOGO_P2TEXTAPPEAR_SONIC
private alias 7  : LOGO_MOVELEFT_SONIC
private alias 8  : LOGO_RISEP2_SONIC
private alias 9  : LOGO_ANIMATEP2_SONIC
private alias 10 : LOGO_ARMAPPEARP2_SONIC
private alias 11 : LOGO_ANIMATEP1_SONIC

// Tails States
private alias 0  : LOGO_SETUP_TAILS
private alias 1  : LOGO_FADEIN_TAILS
private alias 2  : LOGO_RISEDELAY_TAILS
private alias 3  : LOGO_RISE_TAILS
private alias 4  : LOGO_ANIMATE_TAILS
private alias 5  : LOGO_ARMAPPEAR_TAILS
private alias 6  : LOGO_PREPLOGOAPPEAR_TAILS
private alias 7  : LOGO_SHOWLOGO_TAILS
private alias 8  : LOGO_IDLE_TAILS

// Knux States
private alias 0  : LOGO_SETUP_KNUX
private alias 1  : LOGO_FADEIN_KNUX
private alias 2  : LOGO_RISEDELAY_KNUX
private alias 3  : LOGO_RISE_KNUX
private alias 4  : LOGO_ANIMATE_KNUX
private alias 5  : LOGO_ARMAPPEAR_KNUX
private alias 6  : LOGO_ANIMATEARM_KNUX
private alias 7  : LOGO_MOVEARM_KNUX
private alias 8  : LOGO_PREPLOGOAPPEAR_KNUX
private alias 9  : LOGO_ARMAPPEAR2_KNUX
private alias 10 : LOGO_ANIMATEARM2_KNUX
private alias 11 : LOGO_MOVEARM2_KNUX
private alias 12 : LOGO_SHOWLOGO_KNUX
private alias 13 : LOGO_IDLE_KNUX

// Game Modes
private alias 0 : MODE_NOSAVE

// Player List Pos Aliases
private alias 0 : PLAYER_SONIC_A
private alias 1 : PLAYER_TAILS_A
private alias 2 : PLAYER_KNUCKLES_A
private alias 3 : PLAYER_SONIC_TAILS_A
private alias 4 : PLAYER_KNUCKLES_TAILS_A // (not used in this script, but left here for reference)
private alias 5 : PLAYER_AMY_A
private alias 6 : PLAYER_AMY_TAILS_A


// ========================
// Function Declarations
// ========================

reserve function Logo_CheckButtonCheatCodes


// ========================
// Tables
// ========================

private table Logo_playerPalette
	0x6060A0, 0x80A0E0, 0xE08000, 0xE0C080, 0xA04000, 0x600000, 0xE02080, 0xE00040, 0x800000, 0x806080, 0xA08060, 0xE0C0A0, 0x80A0A0, 0xA04020
end table

private table Logo_tailsBodyOffsets
	-50, -40, -53, -56, -58, -68, -60, -74, -62, -78, -63, -79, -64, -80
end table

private table Logo_tailsArmOffsets
	5, -32, 6, -31
end table


// ========================
// Function Definitions
// ========================

private function Logo_CheckButtonCheatCodes
	temp0 = 0 // keyID
	
	if keyPress[0].up == true
		temp0 = 1
	end if

	if keyPress[0].down == true
		temp0 = 2
	end if

	if keyPress[0].left == true
		temp0 = 3
	end if

	if keyPress[0].right == true
		temp0 = 4
	end if

	if keyPress[0].buttonA == true
		temp0 = 5
	end if

	if keyPress[0].buttonB == true
		temp0 = 6
	end if

	if keyPress[0].buttonC == true
		temp0 = 7
	end if
	
	// Level Select Cheat
	// 1, 2, 3, 4
	// up, down, left, right
	switch object.levelSelectCheatPos
	case 0
		if temp0 == 1
			object.levelSelectCheatPos++
		else
			if temp0 != 0
				object.levelSelectCheatPos = 0
			end if
		end if
		break

	case 1
		if temp0 == 2
			object.levelSelectCheatPos++
		else
			if temp0 != 0
				object.levelSelectCheatPos = 0
			end if
		end if
		break

	case 2
		if temp0 == 3
			object.levelSelectCheatPos++
		else
			if temp0 != 0
				object.levelSelectCheatPos = 0
			end if
		end if
		break
		
	case 3
		if temp0 == 4
			object.levelSelectCheatPos++
			object.levelSelectCheatPos = 0
			options.stageSelectFlag = true
			PlaySfx(SfxName[Ring L], false)
		else
			if temp0 != 0
				object.levelSelectCheatPos = 0
			end if
		end if
		break
		
	end switch
	
	// Debug Mode Cheat
	// 1, 7, 2, 7, 3, 7, 4, 7
	// up, C, down, C, left, C, right, C
	switch object.debugModeCheatPos
	case 0
		if temp0 == 1
			object.debugModeCheatPos++
		else
			if temp0 != 0
				object.debugModeCheatPos = 0
			end if
		end if
		break

	case 1
		if temp0 == 7
			object.debugModeCheatPos++
		else
			if temp0 != 0
				object.debugModeCheatPos = 0
			end if
		end if
		break

	case 2
		if temp0 == 2
			object.debugModeCheatPos++
		else
			if temp0 != 0
				object.debugModeCheatPos = 0
			end if
		end if
		break

	case 3
		if temp0 == 7
			object.debugModeCheatPos++
		else
			if temp0 != 0
				object.debugModeCheatPos = 0
			end if
		end if
		break

	case 4
		if temp0 == 3
			object.debugModeCheatPos++
		else
			if temp0 != 0
				object.debugModeCheatPos = 0
			end if
		end if
		break

	case 5
		if temp0 == 7
			object.debugModeCheatPos++
		else
			if temp0 != 0
				object.debugModeCheatPos = 0
			end if
		end if
		break

	case 6
		if temp0 == 4
			object.debugModeCheatPos++
		else
			if temp0 != 0
				object.debugModeCheatPos = 0
			end if
		end if
		break

	case 7
		if temp0 == 7
			object.debugModeCheatPos = 0
			stage.debugMode = true
			PlaySfx(SfxName[Ring L], false)
		else
			if temp0 != 0
				object.debugModeCheatPos = 0
			end if
		end if
		break
		
	end switch
	
	// Region Switch Cheat
	// 1, 2, 2, 2, 2, 1
	// up, down, down, down, down, up
	switch object.regionSwitchCheatPos
	case 0
		if temp0 == 1
			object.regionSwitchCheatPos++
		else
			if temp0 != 0
				object.regionSwitchCheatPos = 0
			end if
		end if
		break

	case 1
	case 2
	case 3
	case 4
		if temp0 == 2
			object.regionSwitchCheatPos++
		else
			if temp0 != 0
				object.regionSwitchCheatPos = 0
			end if
		end if
		break

	case 5
		if temp0 == 1
			object.regionSwitchCheatPos++
			object.regionSwitchCheatPos = 0
			options.region ^= 1
			PlaySfx(SfxName[Ring L], false)
		else
			if temp0 != 0
				object.regionSwitchCheatPos = 0
			end if
		end if
		break
		
	end switch
end function


// ========================
// Events
// ========================

event ObjectUpdate
#platform: USE_ORIGINS
	if object.state <= LOGO_FADEIN_SONIC
		object.character = stage.playerListPos
	end if
#endplatform

#platform: USE_STANDALONE
	if stage.player2Enabled == true
		stage.playerListPos = PLAYER_SONIC_TAILS_A
	end if
#endplatform

	if object.disablePaletteRotation == false
		object.paletteTimer++
		if object.paletteTimer == 6
			object.paletteTimer = 0
			RotatePalette(0, 192, 195, true)
		end if
	end if

#platform: USE_STANDALONE
	// Check for cheat codes in No Save Mode
	if options.gameMode == MODE_NOSAVE
#endplatform
		if object.state > LOGO_RISE_SONIC
			CallFunction(Logo_CheckButtonCheatCodes)
		end if
#platform: USE_STANDALONE
	end if
#endplatform
end event


event ObjectDraw
	temp0 = true

	// Have to use a temp value workaround due to compiler shenanigans
	// Normally, it's just `switch stage.playerListPos` or `switch object.character`, but we can't wrap a switch start with platform checks so this is the next best thing
#platform: USE_STANDALONE
	temp.titleCharacter = stage.playerListPos
#endplatform
#platform: USE_ORIGINS
	temp.titleCharacter = object.character
#endplatform



	// Draw Logo (Top Half)
	if temp0 != false
		DrawSpriteScreenXY(29, screen.xcenter, object.ypos)
	end if

	switch temp.titleCharacter
	case PLAYER_SONIC_A
	case PLAYER_SONIC_TAILS_A
	case PLAYER_TAILS_A
	case PLAYER_KNUCKLES_A
#platform: USE_ORIGINS
	case PLAYER_AMY_A // amy just uses sonic's title screen
	case PLAYER_AMY_TAILS_A
#endplatform
		switch object.state
		case LOGO_SETUP_SONIC
			screen.xoffset 		 = 0

			object.priority 	 = PRIORITY_ACTIVE
			object.timer		 = 0x100
			stage.activeLayer[0] = 1 //set bg to lowest layer
			object.state++

			SetScreenFade(0x00, 0x00, 0x00, 0xFF)
			break

		case LOGO_FADEIN_SONIC
			screen.xoffset += 2

			if object.timer > 0
				object.timer -= 8
			else
				PlayMusic(0)
				object.state++
			end if

			SetScreenFade(0x00, 0x00, 0x00, object.timer)
			break

		case LOGO_RISEDELAY_SONIC
			screen.xoffset += 2

			object.timer++
			if object.timer == 38
				object.timer 		= 0
				object.playerPos.y 	= 112
				object.frame 		= 0
				object.state++
			end if
			break

		case LOGO_RISE_SONIC
			screen.xoffset += 2

			object.playerPos.y -= 8
			if object.playerPos.y < 144
				object.frame = 1
			end if


			if object.playerPos.y <= 112
				object.playerPos.y = 112
				object.state++
			end if

			DrawSpriteScreenXY(object.frame, screen.xcenter, object.playerPos.y)
			break

		case LOGO_ANIMATE_SONIC
			screen.xoffset += 2

			object.timer++
			if object.timer == 4
				object.frame++
				if object.frame >= 26
					object.frame = 26
					object[+1].type 	= TypeName[Start Message]
					object[+1].priority = PRIORITY_ACTIVE
					object[+1].xpos 	= screen.xcenter
					
					object[+1].ypos = 192
					object.state++
				end if
				object.timer = 0
			end if

			DrawSpriteScreenXY(object.frame, screen.xcenter, object.playerPos.y)
			break

		case LOGO_FINGERWIGGLE_SONIC
			screen.xoffset += 2

			object.timer++
			if object.timer == 4
				object.frame++
				if object.frame > 28
					object.frame = 25
				end if
				object.timer = 0
			end if

			DrawSpriteScreenXY(object.frame, screen.xcenter, object.playerPos.y)
			break
		end switch
		break		
	end switch

	// Logo (Bottom Half)
	DrawSpriteScreenXY(30, screen.xcenter, object.ypos)

	// Copyright Sprite
	temp0 = screen.xsize
	temp0 -= 96
	DrawSpriteScreenXY(31, temp0, 216)
end event


event ObjectStartup
	LoadSpriteSheet("Title/Title.gif")
	SetMusicTrack("Titlescreen.ogg", 0, false)

	SpriteFrame(-14, -17, 35, 29, 1, 483)		// Sonic - Frame 1 		- #0
	SpriteFrame(-18, -44, 43, 56, 243, 456)		// Sonic - Frame 2 		- #1
	SpriteFrame(-25, -65, 51, 77, 165, 179)		// Sonic - Frame 3 		- #2
	SpriteFrame(-30, -75, 57, 87, 331, 360)		// Sonic - Frame 4 		- #3
	SpriteFrame(-31, -78, 59, 90, 452, 0) 		// Sonic - Frame 5 		- #4
	SpriteFrame(-32, -78, 61, 90, 451, 422)		// Sonic - Frame 6 		- #5
	SpriteFrame(-33, -74, 65, 88, 1, 1)		// Sonic - Frame 7 		- #6
	SpriteFrame(-34, -72, 67, 84, 389, 360)		// Sonic - Frame 8 		- #7
	SpriteFrame(-33, -74, 65, 88, 1, 1) 		// Sonic - Frame 9 		- #8
	SpriteFrame(-37, -72, 85, 89, 163, 303)		// Sonic - Frame 10		- #9
	SpriteFrame(-34, -66, 74, 88, 67, 1)		// Sonic - Frame 11		- #10
	SpriteFrame(-34, -66, 74, 88, 165, 90)		// Sonic - Frame 12		- #11
	SpriteFrame(-34, -66, 74, 88, 142, 1)		// Sonic - Frame 13		- #12
	SpriteFrame(-35, -75, 74, 89, 83, 393)		// Sonic - Frame 14		- #13
	SpriteFrame(-32, -72, 79, 88, 217, 1)		// Sonic - Frame 15		- #14
	SpriteFrame(-32, -72, 79, 88, 1, 304)		// Sonic - Frame 16		- #15
	SpriteFrame(-24, -74, 72, 88, 297, 1)		// Sonic - Frame 17		- #16
	SpriteFrame(-39, -76, 84, 88, 158, 393)		// Sonic - Frame 18		- #17
	SpriteFrame(-36, -76, 81, 88, 81, 304)		// Sonic - Frame 19		- #18
	SpriteFrame(-36, -76, 81, 88, 370, 1)		// Sonic - Frame 20		- #19
	SpriteFrame(-36, -76, 81, 88, 249, 360)		// Sonic - Frame 21		- #20
	SpriteFrame(-36, -76, 81, 88, 1, 393)		// Sonic - Frame 22		- #21
	SpriteFrame(-36, -76, 81, 88, 1, 90)		// Sonic - Frame 23		- #22
	SpriteFrame(-36, -76, 81, 88, 1, 90)		// Sonic - Frame 24		- #23
	SpriteFrame(-36, -76, 81, 88, 1, 90)		// Sonic - Frame 25		- #24
	SpriteFrame(-36, -76, 81, 88, 1, 90)		// Sonic - Frame 26		- #25
	SpriteFrame(-36, -76, 81, 88, 1, 215)		// Sonic - Frame 27		- #26
	SpriteFrame(-36, -76, 81, 88, 83, 90)		// Sonic - Frame 28		- #27
	SpriteFrame(-36, -76, 81, 88, 83, 215)		// Sonic - Frame 29		- #28

	SpriteFrame(-128, 42, 256, 74, 255, 90) 	// Logo (Top)			- #29
	SpriteFrame(-128, 112, 256, 74, 255, 167) 	// Logo (Bottom)		- #30
	SpriteFrame(0, 0, 71, 17, 38, 490) 		// Copyright Sprite		- #31

	// Setup Player Palette Colors
	temp0 = 208
	temp1 = 0
	while temp1 < 14
		GetTableValue(temp2, temp1, Logo_playerPalette)
		SetPaletteEntry(0, temp0, temp2)
		temp0++
		temp1++
	loop
end event


// ========================
// Editor Events
// ========================

event RSDKDraw
	DrawSprite(0)
	DrawSprite(1)
end event


event RSDKLoad
	LoadSpriteSheet("Title/Title.gif")
	SpriteFrame(-128, 42, 256, 74, 255, 90) 	// Logo (Top)			- #0
	SpriteFrame(-128, 112, 256, 74, 255, 167) 	// Logo (Bottom)		- #1
	
	SetVariableAlias(ALIAS_VAR_PROPVAL, "unused")
end event