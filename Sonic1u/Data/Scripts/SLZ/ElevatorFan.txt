//--------------Sonic 1 Elevator Fan Script----------------//
//--------Scripted by Christian Whitehead 'The Taxman'--------//
//-------Unpacked By Rubberduckycooly's Script Unpacker-------//

// Property Values
private alias 0	: ELEVATOR_ENTRY
private alias 1	: ELEVATOR_EXIT

// Priority
private alias 0 : PRIORITY_ACTIVE
private alias 1 : PRIORITY_BOUNDS

//Player Aliases
private alias object.state : player.state
private alias object.xpos : player.xpos
private alias object.ypos : player.ypos
private alias object.xvel : player.xvel
private alias object.yvel : player.yvel
private alias object.speed : player.speed
private alias object.gravity : player.gravity
private alias object.animationSpeed : player.animationSpeed
private alias object.animation : player.animation
private alias object.scrollTracking : player.scrollTracking
private alias object.tileCollisions : player.tileCollisions

private alias object.value1 : player.timer

private alias object.value0 : object.timer
private alias object.value1 : object.fanOffset.y
private alias object.value2 : object.fanOffset.x
private alias object.value3 : object.hitboxT
private alias object.value4 : object.hitboxB
private alias object.value5 : object.SmallFanLoopTimer
private alias object.value6 : object.SmallFanLoop
private alias object.value7 : object.unused1
private alias object.value8 : object.unused2

// ========================
// Function Declarations
// ========================

reserve function ElevatorFan_DebugDraw
reserve function ElevatorFan_DebugSpawn


// ========================
// Function Definitions
// ========================

private function ElevatorFan_DebugDraw
	DrawSprite(0)
end function


private function ElevatorFan_DebugSpawn
	CreateTempObject(TypeName[Elevator Fan], 0, object.xpos, object.ypos)
	object[tempObjectPos].speed = 48
end function

// ========================
// Events
// ========================

event ObjectUpdate
	switch object.propertyValue
	case ELEVATOR_ENTRY
		object.priority = PRIORITY_ACTIVE
		object.frame = object.animationTimer
		object.frame /= 26
		object.animationTimer += object.speed
		object.animationTimer %= 288
		temp0 = oscillation
		temp0 <<= 2
		object.hitboxT >>= 8
		object.hitboxB = object.hitboxT
		object.hitboxT -= 16
		object.hitboxB += 32
		object.fanOffset.y = object.hitboxT
		object.fanOffset.y <<= 16
		object.fanOffset.y += object.ypos
		if object.outOfBounds == false
			object.SmallFanLoopTimer--
			if object.SmallFanLoopTimer <= 0
				object.SmallFanLoopTimer = 50
				if object.SmallFanLoop == false
					PlaySfx(SfxName[Small Fan], false)
					StopSfx(SfxName[Small Fan Loop])
					object.SmallFanLoop = true
				else
					StopSfx(SfxName[Small Fan])
					PlaySfx(SfxName[Small Fan Loop], false)
				end if
			end if
			SetSfxAttributes(SfxName[Small Fan], -1, 0)
			SetSfxAttributes(SfxName[Small Fan Loop], -1, 0)
		else
			object.SmallFanLoop = false
			object.SmallFanLoopTimer = 50
			StopSfx(SfxName[Small Fan], false)
			StopSfx(SfxName[Small Fan Loop])
		end if
		temp2 = camera[0].xpos
		temp2 -= object.ixpos
		Abs(temp2)
		temp2 -= 128
		if temp2 > screen.xcenter
			object.priority = PRIORITY_BOUNDS
			// these aren't used anywhere else...
			object.unused1 = 0
			object.unused2 = 0
		end if

		foreach (GROUP_PLAYERS, currentPlayer, ACTIVE_ENTITIES)
			BoxCollisionTest(C_TOUCH, object.entityPos, -64, object.hitboxT, 64, object.hitboxB, currentPlayer, C_BOX, C_BOX, C_BOX, C_BOX)
			if checkResult == true
				player[currentPlayer].animation 		= ANI_FANROTATE
				player[currentPlayer].scrollTracking 	= true
				player[currentPlayer].gravity 			= GRAVITY_AIR
				player[currentPlayer].state 			= Player_State_Air
				player[currentPlayer].tileCollisions 	= true
				player[currentPlayer].timer 			= 0
				player[currentPlayer].speed 			= 0
				player[currentPlayer].xpos = object.xpos
				player[currentPlayer].yvel 			= -0x100000
				temp1 = object.fanOffset.y
				temp1 -= player[currentPlayer].ypos
				temp1 >>= 4
				player[currentPlayer].ypos += temp1
			end if
		next
		break

	case ELEVATOR_EXIT
		BoxCollisionTest(C_TOUCH, object.entityPos, -16, -16, 16, 16, currentPlayer, 0, 0, 0, 0)
		if CheckResult == true
			if player[currentPlayer].state != Player_State_Death
				if player[currentPlayer].state != Player_State_Drown
					player[currentPlayer].yvel = 0x40000

#platform: Use_Origins
					player[currentPlayer].state = Player_State_Air_NoDropDash
#endplatform

#platform: Use_Standalone
					player[currentPlayer].state = Player_State_Air
#endplatform

					player[currentPlayer].animation = ANI_WALKING
				end if
			end if
		end if
		break
	end switch
end event

event ObjectDraw
	DrawSprite(object.frame)
end event

event ObjectStartup
	CheckCurrentStageFolder("Zone05")
	if checkResult == true
		LoadSpriteSheet("SLZ/Objects3.gif")
		SpriteFrame(-32, -12, 64, 24, 66, 1)
		SpriteFrame(-32, -12, 64, 24, 1, 1)
		SpriteFrame(-32, -12, 64, 24, 131, 1)
		SpriteFrame(-32, -12, 64, 24, 1, 1)
		SpriteFrame(-32, -12, 64, 24, 1, 26)
		SpriteFrame(-32, -12, 64, 24, 1, 1)
		SpriteFrame(-32, -12, 64, 24, 66, 26)
		SpriteFrame(-32, -12, 64, 24, 1, 1)
		SpriteFrame(-32, -12, 64, 24, 131, 26)
		SpriteFrame(-32, -12, 64, 24, 1, 1)
	end if

	foreach (TypeName[Elevator Fan], arrayPos0, ALL_ENTITIES)
		object[arrayPos0].speed = 36
		object[arrayPos0].priority = PRIORITY_BOUNDS
	next

	SetTableValue(TypeName[Elevator Fan], DebugMode_ObjCount, DebugMode_TypesTable)
	SetTableValue(ElevatorFan_DebugDraw, DebugMode_ObjCount, DebugMode_DrawTable)
	SetTableValue(ElevatorFan_DebugSpawn, DebugMode_ObjCount, DebugMode_SpawnTable)
	DebugMode_ObjCount++
end event

// ========================
// Editor Events
// ========================

event RSDKDraw
	DrawSprite(0)
end event


event RSDKLoad
	LoadSpriteSheet("SLZ/Objects3.gif")
	SpriteFrame(-32, -12, 64, 24, 66, 1)		// #0 - "Script" Icon

	SetVariableAlias(ALIAS_VAR_PROPVAL, "unused")
end event
