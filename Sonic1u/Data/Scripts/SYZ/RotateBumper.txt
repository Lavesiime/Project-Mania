// ----------------------------------
// RSDK Project: Sonic 2
// Script Description: Rotate Bumper Object
// Script Author: Christian Whitehead/Simon Thomley
// Unpacked by Rubberduckycooly's script unpacker
// ----------------------------------

// ========================
// Aliases
// ========================

private alias object.value0  : object.rotateAngle
private alias object.value1  : object.drawPos.x
private alias object.value2  : object.drawPos.y
private alias object.value3  : object.collisionOffset.x
private alias object.value4  : object.collisionOffset.y
private alias object.value5  : object.length
private alias object.value6  : object.rotateSpeed
private alias object.value7 : Object.Timer
private alias object.value8 : Object.BumpCount 
private alias object.value9 : Object.Oscillation
private alias object.value10 : object.XOriginPos
private alias object.value11 : object.YOriginPos

// States
private alias 0 : BUMPER_IDLE
private alias 1 : BUMPER_ACTIVE

// Gravity
private alias 0 : GRAVITY_GROUND
private alias 1 : GRAVITY_AIR

// Stage SFX
private alias 0 : SFX_S_BUMPER

// Priority
private alias 0 : PRIORITY_BOUNDS
private alias 1 : PRIORITY_ACTIVE

// Player Aliases
private alias object[0].state : player.state
private alias object[0].xpos : player.xpos
private alias object[0].ypos : player.ypos
private alias object[0].xvel : player.xvel
private alias object[0].yvel : player.yvel
private alias object[0].speed : player.speed
private alias object[0].gravity : player.gravity
private alias object[0].animation : player.animation
private alias object[0].tileCollisions : player.tileCollisions
private alias object[0].value1  : player.timer
private alias object[0].value36 : player.flyCarryTimer
private alias object[0].value40 : player.hitboxLeft
private alias object[0].value38 : player.hitboxTop
private alias object[0].value41 : player.hitboxRight
private alias object[0].value39 : player.hitboxBottom


// ========================
// Function Declarations
// ========================

reserve function RotateBumper_DebugDraw
reserve function RotateBumper_DebugSpawn


// ========================
// Function Definitions
// ========================

private function RotateBumper_DebugDraw
	temp7 = 3
	DrawSprite(0)

	temp0 = 0
	temp1 = 16
	while temp0 < temp7
		Cos(temp2, 128)
		temp2 *= temp1
		temp2 <<= 7
		temp2 += object.xpos

		Sin(temp3, 128)
		temp3 *= temp1
		temp3 <<= 7
		temp3 += object.ypos

		DrawSpriteXY(1, temp2, temp3)

		temp0++
		temp1 += 16
	loop
	temp1 -= 8

	Cos(temp2, 128)
	temp2 *= temp1
	temp2 <<= 7
	temp2 += object.xpos

	Sin(temp3, 128)
	temp3 *= temp1
	temp3 <<= 7
	temp3 += object.ypos

	DrawSpriteXY(2, temp2, temp3)
end function


private function RotateBumper_DebugSpawn
	CreateTempObject(TypeName[Rotate Bumper], 0, object.xpos, object.ypos)
	object[tempObjectPos].length = 3
	object[tempObjectPos].rotateSpeed = 128
	object[tempObjectPos].rotateAngle = 0

	CreateTempObject(TypeName[Rotate Bumper], 0, object.xpos, object.ypos)
	object[tempObjectPos].length = 3
	object[tempObjectPos].rotateSpeed = 128
	object[tempObjectPos].rotateAngle = 0x5500

	CreateTempObject(TypeName[Rotate Bumper], 0, object.xpos, object.ypos)
	object[tempObjectPos].length = 3
	object[tempObjectPos].rotateSpeed = 128
	object[tempObjectPos].rotateAngle = 0xAB00
end function


// ========================
// Events
// ========================

event ObjectUpdate
	temp6 = object.xpos
	temp3 = object.ypos
	object.rotateAngle += object.rotateSpeed
	object.rotateAngle &= 0x1FFFF

	temp0 = object.rotateAngle
	temp0 >>= 8
	temp1 = object.length
	temp1++
	temp1 <<= 4
	object.xpos = object.drawPos.x
	object.ypos = object.drawPos.y

	Cos256(object.collisionOffset.x, temp0)
	object.collisionOffset.x *= temp1
	object.collisionOffset.x <<= 8
	object.collisionOffset.x += temp6
	object.collisionOffset.x &= 0xFFFF0000
	object.drawPos.x = object.collisionOffset.x
	object.collisionOffset.x -= object.xpos

	Sin256(object.collisionOffset.y, temp0)
	object.collisionOffset.y *= temp1
	object.collisionOffset.y <<= 8
	object.collisionOffset.y += temp3
	object.collisionOffset.y &= 0xFFFF0000
	object.drawPos.y = object.collisionOffset.y
	object.collisionOffset.y -= object.ypos

	if object.state > 0
		object.frame = object.timer
		object.frame /= 5
		object.frame++

		object.timer++
		if object.timer > 22
			object.timer = 0
			object.state = BUMPER_IDLE
			object.frame = 0
		end if
	end if

	if object.outOfBounds == true
		object.BumpCount  = 0
		object.priority = PRIORITY_ACTIVE

		temp5 = object[arrayPos0].propertyValue
		temp5 >>= 2
		temp5 &= 3
		if temp5 == 1
			object[arrayPos0].rotateAngle += 0x5500
		end if

		if temp5 == 2
			object[arrayPos0].rotateAngle -= 0x5500
		end if
	end if

	foreach (GROUP_PLAYERS, currentPlayer, ACTIVE_ENTITIES)
		if player[currentPlayer].animation != ANI_HURT
			BoxCollisionTest(C_TOUCH, object.entityPos, -7, -6, 7, 6, currentPlayer, player[currentPlayer].hitboxLeft, player[currentPlayer].hitboxTop, player[currentPlayer].hitboxRight, player[currentPlayer].hitboxBottom)
			if checkResult == true
				if object.state == BUMPER_IDLE
					PlaySfx(SfxName[Bumper], false)
					if Object.BumpCount < 5
						CreateTempObject(TypeName[Object Score], 16, object.xpos, object.ypos)
						player.score += 10
						object.bumpCount++
					end if
				end if

				if Object.Timer > 5
					PlaySfx(SfxName[Bumper], false)
				end if
				
				object.state = BUMPER_ACTIVE
				object.priority = PRIORITY_ACTIVE

				temp0 = player[currentPlayer].xpos
				temp0 -= object.xpos
				temp1 = player[currentPlayer].ypos
				temp1 -= object.ypos
				ATan2(temp2, temp0, temp1)
				Cos256(temp0, temp2)
				Sin256(temp1, temp2)
				temp0 *= 0x700
				temp1 *= 0x700

				if player[currentPlayer].state == Player_State_Carried
					player[1].flyCarryTimer = 30
				end if

				CheckEqual(player[currentPlayer].animation, ANI_GLIDING)
				temp2 = checkResult
				CheckEqual(player[currentPlayer].animation, ANI_GLIDING_STOP)
				temp2 |= checkResult
				CheckEqual(player[currentPlayer].animation, ANI_FLYING)
				temp2 |= checkResult
				if temp2 == false
					player[currentPlayer].state = Player_State_Air
					if player[currentPlayer].animation != ANI_JUMPING
						if player[currentPlayer].animation != ANI_RUNNING
							player[currentPlayer].animation = ANI_WALKING
						end if
					end if
				end if

				if player[currentPlayer].animation != ANI_GLIDING
					player[currentPlayer].xvel = temp0
					player[currentPlayer].speed = player[currentPlayer].xvel
					player[currentPlayer].timer = 0
				end if

				player[currentPlayer].xvel = temp0
				player[currentPlayer].yvel = temp1
				player[currentPlayer].gravity = GRAVITY_AIR
				player[currentPlayer].tileCollisions = true
			end if
		end if
	next
	object.xpos = temp6
	object.ypos = temp3
end event


event ObjectDraw
	temp0 = 0
	temp1 = 16

	temp4 = object.rotateAngle
	temp4 >>= 8
	while temp0 < object.length
		Cos256(temp2, temp4)
		temp2 *= temp1
		temp2 <<= 8
		temp2 += object.xpos

		Sin256(temp3, temp4)
		temp3 *= temp1
		temp3 <<= 8
		temp3 += object.ypos



		temp0++
		temp1 += 16
	loop
	Cos256(object.drawPos.x, temp4)
	object.drawPos.x *= temp1
	object.drawPos.x <<= 8
	object.drawPos.x += object.xpos
	object.drawPos.x &= 0xFFFF0000

	Sin256(object.drawPos.y, temp4)
	object.drawPos.y *= temp1
	object.drawPos.y <<= 8
	object.drawPos.y += object.ypos
	object.drawPos.y &= 0xFFFF0000

	DrawSpriteXY(object.frame, object.drawPos.x, object.drawPos.y)

end event


event ObjectStartup
	LoadSpriteSheet("SYZ/Objects.gif")
	SpriteFrame(-14, -14, 28, 28, 1, 131)
	SpriteFrame(-12, -12, 24, 24, 30, 131)
	SpriteFrame(-16, -16, 32, 32, 55, 131)
	SpriteFrame(-12, -12, 24, 24, 30, 131)
	SpriteFrame(-16, -16, 32, 32, 55, 131)
	SpriteFrame(-16, -16, 32, 32, 55, 131) // This last frame isn't really used, it seems

	SetTableValue(TypeName[Rotate Bumper], DebugMode_ObjCount, DebugMode_TypesTable)
	SetTableValue(RotateBumper_DebugDraw, DebugMode_ObjCount, DebugMode_DrawTable)
	SetTableValue(RotateBumper_DebugSpawn, DebugMode_ObjCount, DebugMode_SpawnTable)
	DebugMode_ObjCount++

	foreach (TypeName[Rotate Bumper], arrayPos0, ALL_ENTITIES)
		object[arrayPos0].length = 3
		object[arrayPos0].drawOrder = 4
		object[arrayPos0].rotateSpeed = object[arrayPos0].propertyValue
		object[arrayPos0].rotateSpeed &= 0xF0
		if object[arrayPos0].rotateSpeed >= 0x80
			object[arrayPos0].rotateSpeed -= 0x80
			FlipSign(object[arrayPos0].rotateSpeed)
		end if
		object[arrayPos0].rotateSpeed <<= 3

		object[arrayPos0].rotateAngle = object[arrayPos0].propertyValue
		object[arrayPos0].rotateAngle &= 3
		object[arrayPos0].rotateAngle <<= 15

		temp5 = object[arrayPos0].propertyValue
		temp5 >>= 2
		temp5 &= 3
		if temp5 == 1
			object[arrayPos0].rotateAngle += 0x5500
		end if

		if temp5 == 2
			object[arrayPos0].rotateAngle -= 0x5500
		end if
	next
end event


// ========================
// Editor Events
// ========================

event RSDKEdit
	if editor.returnVariable == true
		switch editor.variableID
		case EDIT_VAR_PROPVAL // property value
			checkResult = object.propertyValue
			break
			
		case 0 // angle
			checkResult = object.propertyValue
			checkResult &= 3
			break
			
		case 1 // angle
			checkResult = object.propertyValue
			checkResult >>= 2
			checkResult &= 3
			break
			
		case 2 // rotateSpeed
			checkResult = object.propertyValue
			checkResult >>= 4
			checkResult &= 0xF
			break
		end switch
	else
		switch editor.variableID
		case EDIT_VAR_PROPVAL // property value
			object.propertyValue = editor.variableValue
			break
			
		case 0 // angle
			editor.variableValue &= 3

			temp0 = 3
			Not(temp0)
			object.propertyValue &= temp0

			object.propertyValue |= editor.variableValue
			break
			
		case 1 // angle
			editor.variableValue &= 3
			editor.variableValue <<= 2

			temp0 = 3
			temp0 <<= 2
			Not(temp0)
			object.propertyValue &= temp0

			object.propertyValue |= editor.variableValue
			break
			
		case 2 // rotateSpeed
			editor.variableValue &= 0xF
			editor.variableValue <<= 4

			temp0 = 0x0F
			object.propertyValue &= temp0

			object.propertyValue |= editor.variableValue
			break
		end switch
	end if
end event


event RSDKDraw
	object.length = 3

	object.rotateSpeed = object.propertyValue
	object.rotateSpeed &= 0xF0
	if object.rotateSpeed >= 0x80
		object.rotateSpeed -= 0x80
		FlipSign(object.rotateSpeed)
	end if


	object.rotateAngle = object.propertyValue
	object.rotateAngle &= 3
	object.rotateAngle <<= 15

	temp5 = object.propertyValue
	temp5 >>= 2
	temp5 &= 3
	if temp5 == 1
		object.rotateAngle += 0x5500
	end if

	if temp5 == 2
		object.rotateAngle -= 0x5500
	end if

	temp2 = object.xpos
	temp3 = object.ypos
	object.rotateAngle &= 0x1FFFF

	temp0 = object.rotateAngle
	temp0 >>= 8
	temp1 = object.length
	temp1++
	temp1 <<= 4
	object.xpos = object.drawPos.x
	object.ypos = object.drawPos.y

	Cos256(object.collisionOffset.x, temp0)
	object.collisionOffset.x *= temp1
	object.collisionOffset.x <<= 8
	object.collisionOffset.x += temp2
	object.collisionOffset.x &= 0xFFFF0000
	object.drawPos.x = object.collisionOffset.x
	object.collisionOffset.x -= object.xpos

	Sin256(object.collisionOffset.y, temp0)
	object.collisionOffset.y *= temp1
	object.collisionOffset.y <<= 8
	object.collisionOffset.y += temp3
	object.collisionOffset.y &= 0xFFFF0000
	object.drawPos.y = object.collisionOffset.y
	object.collisionOffset.y -= object.ypos

	object.xpos = temp2
	object.ypos = temp3

	temp0 = 0
	temp1 = 16
	
	temp4 = object.rotateAngle
	temp4 >>= 8
	while temp0 < object.length
		Cos256(temp2, temp4)
		temp2 *= temp1
		temp2 <<= 8
		temp2 += object.xpos

		Sin256(temp3, temp4)
		temp3 *= temp1
		temp3 <<= 8
		temp3 += object.ypos

		DrawSpriteXY(1, temp2, temp3)

		temp0++
		temp1 += 16
	loop
	Cos256(object.drawPos.x, temp4)
	object.drawPos.x *= temp1
	object.drawPos.x <<= 8
	object.drawPos.x += object.xpos
	object.drawPos.x &= 0xFFFF0000

	Sin256(object.drawPos.y, temp4)
	object.drawPos.y *= temp1
	object.drawPos.y <<= 8
	object.drawPos.y += object.ypos
	object.drawPos.y &= 0xFFFF0000

	DrawSpriteXY(2, object.drawPos.x, object.drawPos.y)

	DrawSprite(0)
end event


event RSDKLoad
	LoadSpriteSheet("SYZ/Objects.gif")
	SpriteFrame(-8, -8, 16, 16, 76, 160)
	SpriteFrame(-8, -8, 16, 16, 93, 160)
	SpriteFrame(-24, -8, 48, 16, 69, 177)

	AddEditorVariable("angle")
	SetActiveVariable("angle")

	AddEditorVariable("offset")
	SetActiveVariable("offset")
	AddEnumVariable("None", 0)
	AddEnumVariable("Right", 1)
	AddEnumVariable("Left", 2)

	AddEditorVariable("rotateSpeed")
	SetActiveVariable("rotateSpeed")
end event
