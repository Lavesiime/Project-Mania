//-----------------Sonic CD Mosqui Script---------------------//
//--------Scripted by Christian Whitehead 'The Taxman'--------//
//-------Unpacked By Rubberduckycooly's Script Unpacker-------//

// ========================
// Aliases
// ========================

private alias object.value0 : object.timer
private alias object.value1 : object.XOriginPos
private alias object.value2 : object.YOriginPos

// States
private alias 0	: MOSQUI_MOVE_LEFT
private alias 1	: MOSQUI_MOVE_RIGHT
private alias 2	: MOSQUI_TURN_DOWN
private alias 3	: MOSQUI_DART
private alias 4	: MOSQUI_BLANK
private alias 5	: MOSQUI_RESTORE

// Collision Sides
private alias 0	: CSIDE_FLOOR

// Stage SFX
private alias 2	: SFX_S_JAB

// Priority
private alias 0	: PRIORITY_BOUNDS
private alias 1	: PRIORITY_ACTIVE

// Player aliases
private alias object.value40 : player.hitboxLeft
private alias object.value38 : player.hitboxTop
private alias object.value41 : player.hitboxRight
private alias object.value39 : player.hitboxBottom


private alias object.xpos : player.xpos				// In total world-space position (0x10000 == 1.0)
private alias object.ypos : player.ypos

// ========================
// Function Declarations
// ========================

reserve function Mosqui_DebugDraw
reserve function Mosqui_DebugSpawn


// ========================
// Function Definitions
// ========================

private function Mosqui_DebugDraw
	DrawSpriteFX(0, FX_FLIP, object.xpos, object.ypos)
end function


private function Mosqui_DebugSpawn
	CreateTempObject(TypeName[Mosqui], 0, object.xpos, object.ypos)

	GetBit(temp0, object.direction, 0)

	if temp0 == false
		object[tempObjectPos].direction = FACING_RIGHT
	else
		object[tempObjectPos].direction = FACING_LEFT
	end if
end function

// ========================
// Events
// ========================

event ObjectUpdate
	switch object.state
	case MOSQUI_MOVE_LEFT
		object.priority = PRIORITY_ACTIVE
		object.frame++
		object.frame &= 3
		object.xpos -= 0x10000
		object.timer--
		if object.timer == -128
			object.state = MOSQUI_MOVE_RIGHT
			object.direction = FACING_LEFT
		end if

		foreach (GROUP_PLAYERS, currentPlayer, ACTIVE_ENTITIES)
			if object[currentPlayer].ypos > object.ypos	// Check that player is below Mosqui
				temp0 = object[currentPlayer].ypos
				temp0 -= object.ypos
				if temp0 < 0x800000
					if player.xpos > object.xpos	// Check that player is in attack range
						temp0 = object[currentPlayer].xpos
						temp0 -= object.xpos
					else
						temp0 = object.xpos
						temp0 -= object[currentPlayer].xpos
					end if
					if temp0 < 0x300000
						object.timer = 0
						object.frame = 2
						object.state = MOSQUI_TURN_DOWN
					end if
				end if
			end if
		next
		break

	case MOSQUI_MOVE_RIGHT
		object.priority = PRIORITY_ACTIVE
		object.frame++
		object.frame &= 3
		object.xpos += 0x10000
		object.timer++
		if object.timer == 128
			object.state = MOSQUI_MOVE_LEFT
			object.direction = FACING_RIGHT
		end if
		foreach (GROUP_PLAYERS, currentPlayer, ACTIVE_ENTITIES)
			if object[currentPlayer].ypos > object.ypos	// Check that player is below Mosqui
				temp0 = object[currentPlayer].ypos
				temp0 -= object.ypos
				if temp0 < 0x800000
					if object[currentPlayer].xpos > object.xpos	// Check that player is in attack range
						temp0 = object[currentPlayer].xpos
						temp0 -= object.xpos
					else
						temp0 = object.xpos
						temp0 -= object[currentPlayer].xpos
					end if
					if temp0 < 0x300000
						object.timer = 0
						object.frame = 2
						object.state = MOSQUI_TURN_DOWN
					end if
				end if
			end if
		next
		break

	case MOSQUI_TURN_DOWN
		object.timer++
		if object.timer == 8
			object.timer = 0
			object.frame++
			if object.frame == 5
				object.frame = 4
				object.state = MOSQUI_DART
			end if
		end if
		break

	case MOSQUI_DART
		object.ypos += 0x60000
		ObjectTileCollision(CSIDE_FLOOR, 0, 14, 0)
		if checkResult == true
			object.state = MOSQUI_BLANK
			PlaySfx(SfxName[Jab], false)
		end if
		break

	case MOSQUI_BLANK
		break

	case MOSQUI_RESTORE
		if object.outOfBounds == true
			object.state = MOSQUI_MOVE_LEFT
			object.direction = FACING_RIGHT
			object.priority = PRIORITY_BOUNDS
		end if
		break

	end switch

	if object.outOfBounds == true
		temp0 = object.xpos
		temp1 = object.ypos

		object.xpos = object.XOriginPos
		object.ypos = object.YOriginPos

		if object.outOfBounds == true
			object.xpos = object.XOriginPos
			object.ypos = object.YOriginPos

			object.direction = FACING_RIGHT
			object.timer = 0
			object.frame = 0
			object.priority = PRIORITY_BOUNDS

			object.state = MOSQUI_MOVE_LEFT
		else
			object.xpos = temp0
			object.ypos = temp1
		end if
	end if
	// Check interaction with players
	foreach (GROUP_PLAYERS, currentPlayer, ACTIVE_ENTITIES)
		BoxCollisionTest(C_TOUCH, object.entityPos, -15, -10, 15, 10, currentPlayer, player[currentPlayer].hitboxLeft, player[currentPlayer].hitboxTop, player[currentPlayer].hitboxRight, player[currentPlayer].hitboxBottom)
		if checkResult == true
			CallFunction(Player_BadnikBreak)
		end if
	next
end event


event ObjectDraw
	if object.state < MOSQUI_RESTORE
		if object.state < MOSQUI_TURN_DOWN
			temp0   = object.frame
			temp0 >>= 1
			DrawSpriteFX(temp0, FX_FLIP, object.xpos, object.ypos)
		else
			DrawSpriteFX(object.frame, FX_FLIP, object.xpos, object.ypos)
		end if
	else
		if object.state < MOSQUI_TURN_DOWN
			temp0  = object.frame
			temp0 /= 5
			temp0 += 5
			DrawSpriteFX(temp0, FX_FLIP, object.xpos, object.ypos)
		else
			DrawSpriteFX(object.frame, FX_FLIP, object.xpos, object.ypos)
		end if
	end if
end event


event ObjectStartup
	LoadSpriteSheet("SLZ/Objects.gif")

	// Mosqui
	SpriteFrame(-16, -11, 32, 24, 181, 1)		// #0 - Mosqui Fly Frame 0
	SpriteFrame(-16, -3, 32, 16, 190, 124)		// #1 - Mosqui Fly Frame 1
	SpriteFrame(-16, -14, 32, 32, 190, 141)		// #2 - Mosqui Turning Frame 0
	SpriteFrame(-6, -13, 24, 32, 173, 175)		// #3 - Mosqui Turning Frame 1
	SpriteFrame(-10, -14, 24, 32, 198, 175)		// #4 - Mosqui Turning Frame 0

	// Used to be below LoadSpriteSheet, moved here for consistency
	arrayPos0 = 32
	while ArrayPos0 < 1056
		if object[ArrayPos0].Type == TypeName[Mosqui]
			object[arrayPos0].XOriginPos = object[ArrayPos0].xpos
			object[arrayPos0].YOriginPos = object[ArrayPos0].ypos
		end if
		arrayPos0++
	loop
end event


// ========================
// Editor Events
// ========================

event RSDKEdit
	if editor.returnVariable == true
		switch editor.variableID
		case EDIT_VAR_PROPVAL // Property Value
			CheckResult = Object.Quality
			CheckResult &= 1
			break
		case 0 // type
			CheckResult = Object.Quality
			CheckResult &= 1
			break
		end switch
	else
		switch editor.variableID
		case EDIT_VAR_PROPVAL // Property Value
			Object.Quality = Editor.VariableValue
			Object.Quality &= 1
			break
		case 0 // type
			Object.Quality = Editor.VariableValue
			Object.Quality &= 1
			break
		end switch
	end if
end event

event RSDKDraw
	GetBit(temp0, object.propertyValue, 0)
	if temp0 == 0
		object.direction = FACING_RIGHT
	else
		object.direction = FACING_LEFT
	end if

	DrawSpriteFX(0, FX_FLIP, object.xpos, object.ypos)
	DrawSpriteFX(1, FX_FLIP, object.xpos, object.ypos)
end event


event RSDKLoad
	CheckCurrentStageFolder("Zone05")
	if checkResult == true
		LoadSpriteSheet("SLZ/Objects.gif")
		SpriteFrame(-16, -11, 32, 24, 181, 1)		// #0 - Mosqui Fly Frame 0
	end if

	AddEditorVariable("type")
	SetActiveVariable("type")
	AddEnumVariable("Left", 0)
	AddEnumVariable("Right", 1)
end event
